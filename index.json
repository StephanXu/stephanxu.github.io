[{"categories":[["整理","计算机"]],"content":"发生了什么？ 在VSCode最近的一次更新中，提升远程开发使用的node版本，更新后的node依赖glibc\u003e=2.28。 在升级1.86版本后，如果尝试连接glibc 2.28以下版本的开发机，会提示连接到不受支持的OS版本。 按照官方的要求。最好的解决方案自然是升级到更新的glibc版本，这也意味着需要使用更新的系统版本。在社区的热烈讨论下，VSCode项目组最终对于旧glibc延长额外支持12个月。但新版本连接到旧glibc服务器后，仍然会有一行醒目的提示： 本文提供一种极端手动的方法（本来是给开发环境的dockerfile使用），即手动编译一份glibc和node，以专供VSCode的远端服务器使用。 ","date":"2024-02-19","objectID":"/posts/vscode%E5%8D%87%E7%BA%A71.86%E5%90%8E%E6%8F%90%E7%A4%BA%E4%BD%A0%E5%B7%B2%E8%BF%9E%E6%8E%A5%E5%88%B0%E4%B8%8D%E5%8F%97visual-studio-code%E6%94%AF%E6%8C%81%E7%9A%84os%E7%89%88%E6%9C%AC/:1:0","tags":null,"title":"VSCode升级18.6后提示“你已连接到不受Visual Studio Code支持的OS版本","uri":"/posts/vscode%E5%8D%87%E7%BA%A71.86%E5%90%8E%E6%8F%90%E7%A4%BA%E4%BD%A0%E5%B7%B2%E8%BF%9E%E6%8E%A5%E5%88%B0%E4%B8%8D%E5%8F%97visual-studio-code%E6%94%AF%E6%8C%81%E7%9A%84os%E7%89%88%E6%9C%AC/"},{"categories":[["整理","计算机"]],"content":"开搞 ","date":"2024-02-19","objectID":"/posts/vscode%E5%8D%87%E7%BA%A71.86%E5%90%8E%E6%8F%90%E7%A4%BA%E4%BD%A0%E5%B7%B2%E8%BF%9E%E6%8E%A5%E5%88%B0%E4%B8%8D%E5%8F%97visual-studio-code%E6%94%AF%E6%8C%81%E7%9A%84os%E7%89%88%E6%9C%AC/:2:0","tags":null,"title":"VSCode升级18.6后提示“你已连接到不受Visual Studio Code支持的OS版本","uri":"/posts/vscode%E5%8D%87%E7%BA%A71.86%E5%90%8E%E6%8F%90%E7%A4%BA%E4%BD%A0%E5%B7%B2%E8%BF%9E%E6%8E%A5%E5%88%B0%E4%B8%8D%E5%8F%97visual-studio-code%E6%94%AF%E6%8C%81%E7%9A%84os%E7%89%88%E6%9C%AC/"},{"categories":[["整理","计算机"]],"content":"1. 从编译器说起 (可选) 从文档来看，node现在已经要求到了GCC 10，我们的环境很有可能没准备。（如果你的环境已经有一份比较高版本的编译器，可以跳过这里啦） 这里准备了一份贴贴心的安装脚本，以防你真的没有更新的GCC。为了避免搞坏你的环境，它只会在/usr/local/bin下建立gcc-12和g++-12，而不会覆盖掉默认的gcc，g++命令。 # 编译一份GCC, 参考时间半个钟, 配置好的机器请自行按照CPU核心数酌情修改make -jN curl -OL \"https://ftp.gnu.org/gnu/gcc/gcc-12.2.0/gcc-12.2.0.tar.gz\" \\ \u0026\u0026 tar -zxvf gcc-12.2.0.tar.gz \\ \u0026\u0026 pushd gcc-12.2.0 \\ \u0026\u0026 ./configure --prefix=/usr/local/gcc-12.2.0 \\ \u0026\u0026 make -j8 \\ \u0026\u0026 make install \\ \u0026\u0026 ln -s /usr/local/gcc-12.2.0/bin/gcc /usr/bin/gcc-12 \\ \u0026\u0026 ln -s /usr/local/gcc-12.2.0/bin/g++ /usr/bin/g++-12 \\ \u0026\u0026 popd \\ \u0026\u0026 rm -r gcc-12.2.0.tar.gz gcc-12.2.0 编译了以后记得把LD_LIBRARY_PATH加上: export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/gcc-12.2.0/lib64 ","date":"2024-02-19","objectID":"/posts/vscode%E5%8D%87%E7%BA%A71.86%E5%90%8E%E6%8F%90%E7%A4%BA%E4%BD%A0%E5%B7%B2%E8%BF%9E%E6%8E%A5%E5%88%B0%E4%B8%8D%E5%8F%97visual-studio-code%E6%94%AF%E6%8C%81%E7%9A%84os%E7%89%88%E6%9C%AC/:2:1","tags":null,"title":"VSCode升级18.6后提示“你已连接到不受Visual Studio Code支持的OS版本","uri":"/posts/vscode%E5%8D%87%E7%BA%A71.86%E5%90%8E%E6%8F%90%E7%A4%BA%E4%BD%A0%E5%B7%B2%E8%BF%9E%E6%8E%A5%E5%88%B0%E4%B8%8D%E5%8F%97visual-studio-code%E6%94%AF%E6%8C%81%E7%9A%84os%E7%89%88%E6%9C%AC/"},{"categories":[["整理","计算机"]],"content":"2. 来一份Glibc 这里我选择编译glibc 2.30，glibc需要更新一些的binutils和make，遂编译之。 按照上文，此处我使用了一份手动编译的，较新版本的gcc编译器，如果你的版本已经足够支持，可以不需要手动指定CC和CXX环境变量 因为是从Dockerfile里抠出来的，有一些重复的export，也方便各位节选了🙏 # 编译binutils，参考时间小于5分钟 curl -OL \"https://ftp.gnu.org/gnu/binutils/binutils-2.34.tar.gz\" \\ \u0026\u0026 tar -zxvf binutils-2.34.tar.gz \\ \u0026\u0026 pushd binutils-2.34 \\ \u0026\u0026 export CC=/usr/bin/gcc-12 \\ \u0026\u0026 export CXX=/usr/bin/g++-12 \\ \u0026\u0026 ./configure --prefix=/usr/local/binutils-2.34 \\ \u0026\u0026 make -j8 \\ \u0026\u0026 make install \\ \u0026\u0026 popd \\ \u0026\u0026 rm -r binutils-2.34 binutils-2.34.tar.gz # 编译make，参考时间小于5分钟。 curl -OL \"https://ftp.gnu.org/gnu/make/make-4.1.tar.gz\" \\ \u0026\u0026 tar -zxvf make-4.1.tar.gz \\ \u0026\u0026 pushd make-4.1 \\ \u0026\u0026 export CC=/usr/bin/gcc-12 \\ \u0026\u0026 export CXX=/usr/bin/g++-12 \\ \u0026\u0026 export PATH=/usr/local/binutils-2.34/bin:$PATH \\ \u0026\u0026 ./configure --prefix=/usr/local/make-4.1 \\ \u0026\u0026 make -j8 \\ \u0026\u0026 make install \\ \u0026\u0026 ln -sf /usr/local/make-4.1/bin/make /usr/local/make-4.1/bin/gmake \\ \u0026\u0026 popd \\ \u0026\u0026 rm -r make-4.1 make-4.1.tar.gz # 编译glibc，参考时间小于10分钟 curl -OL \"https://ftp.gnu.org/gnu/glibc/glibc-2.30.tar.gz\" \\ \u0026\u0026 tar -zxvf glibc-2.30.tar.gz \\ \u0026\u0026 pushd glibc-2.30 \\ \u0026\u0026 mkdir -p build \\ \u0026\u0026 pushd build \\ \u0026\u0026 export CC=/usr/bin/gcc-12 \\ \u0026\u0026 export CXX=/usr/bin/g++-12 \\ \u0026\u0026 export PATH=/usr/local/binutils-2.34/bin:/usr/local/make-4.1/bin:$PATH \\ \u0026\u0026 export LD_LIBRARY_PATH=/usr/local/gcc-12.2.0/lib64:/usr/local/gcc-12.2.0/lib64 \\ \u0026\u0026 export CXXFLAGS=\"-g -O2 -Wno-array-parameter\" \\ \u0026\u0026 export CFLAGS=\"-g -O2 -Wno-array-parameter\" \\ \u0026\u0026 ../configure --prefix=/usr/local/glibc-2.30 --disable-werror \\ \u0026\u0026 make -j8 \\ \u0026\u0026 make install \\ \u0026\u0026 popd \\ \u0026\u0026 popd \\ \u0026\u0026 rm -r glibc-2.30 glibc-2.30.tar.gz ","date":"2024-02-19","objectID":"/posts/vscode%E5%8D%87%E7%BA%A71.86%E5%90%8E%E6%8F%90%E7%A4%BA%E4%BD%A0%E5%B7%B2%E8%BF%9E%E6%8E%A5%E5%88%B0%E4%B8%8D%E5%8F%97visual-studio-code%E6%94%AF%E6%8C%81%E7%9A%84os%E7%89%88%E6%9C%AC/:2:2","tags":null,"title":"VSCode升级18.6后提示“你已连接到不受Visual Studio Code支持的OS版本","uri":"/posts/vscode%E5%8D%87%E7%BA%A71.86%E5%90%8E%E6%8F%90%E7%A4%BA%E4%BD%A0%E5%B7%B2%E8%BF%9E%E6%8E%A5%E5%88%B0%E4%B8%8D%E5%8F%97visual-studio-code%E6%94%AF%E6%8C%81%E7%9A%84os%E7%89%88%E6%9C%AC/"},{"categories":[["整理","计算机"]],"content":"3. 来一份node 这里选择了v18.19，直接开编吧。 # 编译node，参考时间20分钟 git clone --depth=1 -b v18.19.0 https://github.com/nodejs/node.git \\ \u0026\u0026 pushd node \\ \u0026\u0026 export CC=/usr/bin/gcc-12 \\ \u0026\u0026 export CXX=/usr/bin/g++-12 \\ \u0026\u0026 export PATH=/usr/local/binutils-2.34/bin:/usr/local/make-4.1/bin:$PATH \\ \u0026\u0026 ./configure --prefix=/usr/local/node-18.19 \\ \u0026\u0026 make -j8 \\ \u0026\u0026 make install \\ \u0026\u0026 popd \\ \u0026\u0026 rm -r node ","date":"2024-02-19","objectID":"/posts/vscode%E5%8D%87%E7%BA%A71.86%E5%90%8E%E6%8F%90%E7%A4%BA%E4%BD%A0%E5%B7%B2%E8%BF%9E%E6%8E%A5%E5%88%B0%E4%B8%8D%E5%8F%97visual-studio-code%E6%94%AF%E6%8C%81%E7%9A%84os%E7%89%88%E6%9C%AC/:2:3","tags":null,"title":"VSCode升级18.6后提示“你已连接到不受Visual Studio Code支持的OS版本","uri":"/posts/vscode%E5%8D%87%E7%BA%A71.86%E5%90%8E%E6%8F%90%E7%A4%BA%E4%BD%A0%E5%B7%B2%E8%BF%9E%E6%8E%A5%E5%88%B0%E4%B8%8D%E5%8F%97visual-studio-code%E6%94%AF%E6%8C%81%E7%9A%84os%E7%89%88%E6%9C%AC/"},{"categories":[["整理","计算机"]],"content":"4. patch一下 # 以防你真的没有patchelf yum install patchelf # 这里不同环境具体文件名可能不同，但路径基本一致，请按实际情况修改 patchelf --set-interpreter /usr/local/glibc-2.30/lib/ld-linux-x86-64.so.2 \\ --set-rpath /usr/local/glibc-2.30/lib/:/lib/x86_64-redhat-linux6E/:/usr/lib/x86_64-redhat-linux6E \\ /usr/local/node-18.19/bin/node ","date":"2024-02-19","objectID":"/posts/vscode%E5%8D%87%E7%BA%A71.86%E5%90%8E%E6%8F%90%E7%A4%BA%E4%BD%A0%E5%B7%B2%E8%BF%9E%E6%8E%A5%E5%88%B0%E4%B8%8D%E5%8F%97visual-studio-code%E6%94%AF%E6%8C%81%E7%9A%84os%E7%89%88%E6%9C%AC/:2:4","tags":null,"title":"VSCode升级18.6后提示“你已连接到不受Visual Studio Code支持的OS版本","uri":"/posts/vscode%E5%8D%87%E7%BA%A71.86%E5%90%8E%E6%8F%90%E7%A4%BA%E4%BD%A0%E5%B7%B2%E8%BF%9E%E6%8E%A5%E5%88%B0%E4%B8%8D%E5%8F%97visual-studio-code%E6%94%AF%E6%8C%81%E7%9A%84os%E7%89%88%E6%9C%AC/"},{"categories":[["整理","计算机"]],"content":"5. 替换到VSCode 在~/.vscode-server/bin/{id}中存储了VSCode自带的node实例，这里简单替换下，可以将下面的内容保存到.sh脚本运行（记得替换成自己的路径）。 #!/bin/sh # 记得替换成自己的路径 binary_base=\"/root/.vscode-server/bin/903b1e9d8990623e3d7da1df3d33db3e42d80eda\" replace_base=\"/usr/local/node-18.19\" mv \"$binary_base/node\" \"$binary_base/node.bak\" ln -sf \"$replace_base/bin/node\" \"$binary_base/node\" 接着，kill掉VSCode所在的进程，或直接重启机器，再重新连接就完成了。 或者使用下面这个脚本，一键替换机器上所有VSCode实例: #!/bin/sh # upgrade vscode's node binary to v18 function _internal_replace_binary() { binary_base=\"$1\" replace_base=\"$2\" mv \"$binary_base/node\" \"$binary_base/node.bak\" ln -sf \"$replace_base/bin/node\" \"$binary_base/node\" echo \"✅ 升级成功: $binary_base\" } function _internal_replace_all_vscode_server() { replace_base=\"/usr/local/node-18.19\" if [ ! -f \"$replace_base/bin/node\" ]; then echo \"❎: 镜像文件缺失 ($replace_base/bin/node)\" return 1 fi for dir in $(find ~/.vscode-server/bin -maxdepth 1 -mindepth 1 -type d) do _internal_replace_binary $dir $replace_base done echo \"✅ 全部完成: 请重连 VSCode 或重启设备\" ps -ef | grep \"\\.vscode-server/bin\" | grep node | awk '{print($2)}' | xargs -i kill {} } _internal_replace_all_vscode_server ","date":"2024-02-19","objectID":"/posts/vscode%E5%8D%87%E7%BA%A71.86%E5%90%8E%E6%8F%90%E7%A4%BA%E4%BD%A0%E5%B7%B2%E8%BF%9E%E6%8E%A5%E5%88%B0%E4%B8%8D%E5%8F%97visual-studio-code%E6%94%AF%E6%8C%81%E7%9A%84os%E7%89%88%E6%9C%AC/:2:5","tags":null,"title":"VSCode升级18.6后提示“你已连接到不受Visual Studio Code支持的OS版本","uri":"/posts/vscode%E5%8D%87%E7%BA%A71.86%E5%90%8E%E6%8F%90%E7%A4%BA%E4%BD%A0%E5%B7%B2%E8%BF%9E%E6%8E%A5%E5%88%B0%E4%B8%8D%E5%8F%97visual-studio-code%E6%94%AF%E6%8C%81%E7%9A%84os%E7%89%88%E6%9C%AC/"},{"categories":["计算机"],"content":"性质 每个节点要么是黑色，要么是红色 根节点是黑色 每个叶子结点（NIL）是黑色 每个红色节点的两个子节点一定都是黑色，即不能有两个红色节点相连 任意一节点到每个叶子结点的路径都包含数量相同的黑节点（俗称“黑高”） 推论：如果一个节点存在黑子节点，那么该节点肯定有两个子节点。 ","date":"2021-12-06","objectID":"/posts/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/:1:0","tags":null,"title":"红黑树基础操作","uri":"/posts/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"},{"categories":["计算机"],"content":"自平衡操作 变色：结点的颜色由红变黑或由黑变红。 左旋：以某个节点作为支点（旋转节点），其右子节点变为旋转节点的父节点，右子节点的左子节点变为旋转节点的右子节点，左子节点保持不变。 右旋：以某个节点作为支点（旋转节点），其左子节点变为旋转节点的父节点，左子节点的右子节点变为旋转节点的左子节点，右节点保持不变。 ","date":"2021-12-06","objectID":"/posts/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/:2:0","tags":null,"title":"红黑树基础操作","uri":"/posts/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"},{"categories":["计算机"],"content":"插入操作 插入节点时，节点必须为红色。 原因：红色在父节点为黑色节点时，红黑树的黑色平衡没有被破坏，不需要做自平衡操作。但如果插入节点为黑色，那么插入位置所在的子树黑色节点总是多1，必须做自平衡。 ","date":"2021-12-06","objectID":"/posts/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/:3:0","tags":null,"title":"红黑树基础操作","uri":"/posts/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"},{"categories":["计算机"],"content":"术语 ","date":"2021-12-06","objectID":"/posts/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/:3:1","tags":null,"title":"红黑树基础操作","uri":"/posts/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"},{"categories":["计算机"],"content":"插入情景 红黑树为空树：直接把插入节点作为根节点，并把插入节点设置为黑色。 插入节点的Key已经存在：更新当前节点的值为插入节点的值。 插入节点的父节点为黑色：由于插入的节点是红色的，当父节点是黑色时，并不会影响红黑树的平衡，直接插入即可，无需做自平衡。 插入节点的父节点为红色：如果插入节点的父节点为红节点，那么该父节点不可能为根节点，所以插入节点总是存在祖父节点。 叔叔节点存在并且为红节点 将P和U节点改为黑色 将PP改为红色 将PP设置为当前节点，进行后续处理（即如果PP的父节点也是红色，则继续以PP为当前节点进行插入操作自平衡处理，直到平衡为止） 叔叔节点不存在或为黑节点，并且插入节点的父亲节点是祖父节点的左子节点 新插入的节点是其父节点的左子节点（LL双红） 变色：将P设置为黑色，将PP设置为红色 对PP节点进行右旋 新插入的节点是其父节点的右子节点（LR双红） 对P进行左旋 将P设置为当前节点，得到“LL双红”的情况 按照“LL双红”的情况处理（变颜色、右旋PP） 叔叔节点不存在或为黑节点，并且插入节点的父亲节点是祖父节点的右子节点 新插入的节点是其父节点的右子节点（RR双红） 变色：将P设置为黑色，将PP设置为红色 对PP节点进行左旋 新插入的节点是其父节点的左子节点（RL双红） 对P进行右旋 将P设置为当前节点，得到“RR红色”的情况 按照“RR红色”情况处理（变颜色、左旋PP） ","date":"2021-12-06","objectID":"/posts/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/:3:2","tags":null,"title":"红黑树基础操作","uri":"/posts/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"},{"categories":[["计算机"]],"content":"本文记录了在Linux（含MacOS）、Windows下配置SSH、HTTP代理以加速Github的使用。 ","date":"2020-11-21","objectID":"/posts/github%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/:0:0","tags":null,"title":"Github代理设置","uri":"/posts/github%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/"},{"categories":[["计算机"]],"content":"HTTP连接 HTTP可以使用HTTP代理服务器进行加速，在Github中配置： git config --global https.proxy http://127.0.0.1:1080 git config --global https.proxy https://127.0.0.1:1080 git config --global --unset http.proxy git config --global --unset https.proxy ","date":"2020-11-21","objectID":"/posts/github%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/:1:0","tags":null,"title":"Github代理设置","uri":"/posts/github%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/"},{"categories":[["计算机"]],"content":"SSH连接 针对SSH方式操作的仓库，需要配置Socks5代理，在~/.ssh/config文件中加入ProxyCommand配置即可，Linux下可用： Host github.com User git ProxyCommand nc -X 5 -x 127.0.0.1:1086 %h %p Windows下可使用 Host github.com User git ProxyCommand connect -S 127.0.0.1:2801 %h %p ","date":"2020-11-21","objectID":"/posts/github%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/:2:0","tags":null,"title":"Github代理设置","uri":"/posts/github%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/"},{"categories":[["计算机"]],"content":"基于Docker的建立 ","date":"2020-11-18","objectID":"/posts/mongodb%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C/:1:0","tags":null,"title":"MongoDB基础配置手册","uri":"/posts/mongodb%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C/"},{"categories":[["计算机"]],"content":"创建数据库 docker run -d -p 27017:27017 —name mongo \\ -e MONGO_INITDB_ROOT_USERNAME=root \\ -e MONGO_INITDB_ROOT_PASSWORD=mypassword \\ -e MONGO_INITDB_DATABASE=myfirstdb \\ -v /my/own/datadir:/data/db \\ mongo:4 在使用了MONGO_INITDB_ROOT_USERNAME与MONGO_INITDB_ROOT_PASSWORD后，容器脚本将自动创建一个具有完全权限的账号，并在启动mongod时指定—-auth开启身份验证。 ","date":"2020-11-18","objectID":"/posts/mongodb%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C/:1:1","tags":null,"title":"MongoDB基础配置手册","uri":"/posts/mongodb%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C/"},{"categories":[["计算机"]],"content":"创建备份 建立在Docker中的MongoDB可以使用下面的语句来建立备份： docker exec some-mongo sh -c 'exec mongodump -d \u003cdatabase_name\u003e --archive' \u003e /some/path/on/your/host/all-collections.archive ","date":"2020-11-18","objectID":"/posts/mongodb%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C/:1:2","tags":null,"title":"MongoDB基础配置手册","uri":"/posts/mongodb%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C/"},{"categories":[["计算机"]],"content":"访问控制 注意：启动mongod时应使用—auth才会开启访问控制。 如果admin库中没有任何用户的话，即使在其他数据库创建用户，无论是否启用访问控制，默认的连接方式依然会具有超级权限。 客户端可以在连接时进行身份验证： mongo --port 27017 -u \"username\" -p \"password\" --authenticationDatabase \"admin\" 亦可在连接客户端后进行验证： mongo --port 27017 use admin db.auth(\"username\", \"password\") // 输出1即认证成功 ","date":"2020-11-18","objectID":"/posts/mongodb%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C/:2:0","tags":null,"title":"MongoDB基础配置手册","uri":"/posts/mongodb%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C/"},{"categories":[["计算机"]],"content":"创建用户 use foo db.createUser( { user: \"username\", pwd: \"password\", roles: [{role: \"readWrite\", db: \"foo\"}, {role: \"read\", db: \"bar\"}] } ) 注意：use foo表明用户在foo库中创建，就一定要由foo库验证身份，即用户的信息跟随随数据库。如上述username虽然有bar库的读取权限，但是一定要先在foo库进行身份验证，直接访问会提示验证失败。 ","date":"2020-11-18","objectID":"/posts/mongodb%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C/:3:0","tags":null,"title":"MongoDB基础配置手册","uri":"/posts/mongodb%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C/"},{"categories":[["计算机"]],"content":"角色 Read：允许用户读取指定数据库 readWrite：允许用户读写指定数据库 dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户 clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。 readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限 readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限 userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限 dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。 root：只在admin数据库中可用。超级账号，超级权限 ","date":"2020-11-18","objectID":"/posts/mongodb%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C/:4:0","tags":null,"title":"MongoDB基础配置手册","uri":"/posts/mongodb%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C/"},{"categories":[["计算机"]],"content":"本文档记录了简单的LXD虚拟化方案，能够实现 在物理机上创建多个隔离的容器环境 在容器环境中运行桌面 将GPU接入容器环境中，并在多个容器间共享 ","date":"2020-07-05","objectID":"/posts/lxd%E8%99%9A%E6%8B%9F%E5%8C%96%E9%85%8D%E7%BD%AE/:0:0","tags":null,"title":"LXD虚拟化服务器","uri":"/posts/lxd%E8%99%9A%E6%8B%9F%E5%8C%96%E9%85%8D%E7%BD%AE/"},{"categories":[["计算机"]],"content":"快速配置 ","date":"2020-07-05","objectID":"/posts/lxd%E8%99%9A%E6%8B%9F%E5%8C%96%E9%85%8D%E7%BD%AE/:1:0","tags":null,"title":"LXD虚拟化服务器","uri":"/posts/lxd%E8%99%9A%E6%8B%9F%E5%8C%96%E9%85%8D%E7%BD%AE/"},{"categories":[["计算机"]],"content":"宿主机 快速初始化宿主机 # 安装对应依赖 sudo apt install lxd zfsutils-linux bridge-utils # 创建存储池 lxc storage create \u003cstorage-poll-name\u003e zfs size=256GB # 初始化lxd lxd init # 添加存储池 lxc profile device add default root disk path=/ pool=\u003cstorage-poll-name\u003e # 添加清华镜像 lxc remote add tuna-images https://mirrors.tuna.tsinghua.edu.cn/lxc-images/ --protocol=simplestreams --public 快速创建新容器 # 创建容器（此处对应ubuntu/18.04镜像） lxc launch tuna-images:ubuntu/18.04 \u003ccontainer-name\u003e # 添加GPU（此处添加第一个GPU） lxc config device add \u003ccontainer-name\u003e gpu0 gpu id=0 如果需要在容器内运行docker，需要权限 lxc config edit \u003ccontainer-name\u003e 在config段中添加设置 security.nesting: \"true\" security.privileged: \"true\" ","date":"2020-07-05","objectID":"/posts/lxd%E8%99%9A%E6%8B%9F%E5%8C%96%E9%85%8D%E7%BD%AE/:1:1","tags":null,"title":"LXD虚拟化服务器","uri":"/posts/lxd%E8%99%9A%E6%8B%9F%E5%8C%96%E9%85%8D%E7%BD%AE/"},{"categories":[["计算机"]],"content":"容器 # 设置密码，此处对应的是ubuntu/18.04镜像 passwd root passwd ubuntu # 安装SSH apt update apt install openssh-server # 安装图形界面 apt install ubuntu-desktop # 安装NVIDIA驱动（如果有），建议由驱动自动配置X service sudo sh ./NVIDIA-Linux-X86_64-\u003cdriver-version\u003e.run --no-kernel-module # 安装rdp wget \"https://www.c-nergy.be/downloads/xrdp-installer-1.2.zip\" unzip xrdp-installer-1.2.zip chmod +x xrdp-installer-1.2.sh ./xrdp-installer-1.2.sh ","date":"2020-07-05","objectID":"/posts/lxd%E8%99%9A%E6%8B%9F%E5%8C%96%E9%85%8D%E7%BD%AE/:1:2","tags":null,"title":"LXD虚拟化服务器","uri":"/posts/lxd%E8%99%9A%E6%8B%9F%E5%8C%96%E9%85%8D%E7%BD%AE/"},{"categories":[["计算机"]],"content":"常用命令 查看清华源中的镜像列表： lxc image list tuna-images: 显示容器信息 lxc info \u003ccontainer-name\u003e 进入容器 lxc exec \u003ccontainer-name\u003e /bin/bash 推送文件到容器中 lxc file push \u003csource\u003e \u003ccontainer-name\u003e/path/to/destination 从容器中取出文件 lxc file pull \u003ccontainer-name\u003e/path/to/source \u003cdestination\u003e 保存当前容器为镜像 lxc publish \u003ccontainer-name\u003e --alias \u003cimage-name\u003e --public 生成快照 lxc snapshot \u003ccontainer-name\u003e \u003csnapshot-name?\u003e 还原快照 lxc restore \u003ccontainer-name\u003e \u003csnapshot-name\u003e 导出镜像 lxc image export \u003cimage-name\u003e \u003cfile-path\u003e 导入镜像 sudo lxc image import \u003cfile-path\u003e --alias \u003cimage-name\u003e ","date":"2020-07-05","objectID":"/posts/lxd%E8%99%9A%E6%8B%9F%E5%8C%96%E9%85%8D%E7%BD%AE/:2:0","tags":null,"title":"LXD虚拟化服务器","uri":"/posts/lxd%E8%99%9A%E6%8B%9F%E5%8C%96%E9%85%8D%E7%BD%AE/"},{"categories":[["计算机"]],"content":"端口映射办法 默认SSH映射在外网：6X22 默认RDP映射在外网：6X89 ","date":"2020-07-05","objectID":"/posts/lxd%E8%99%9A%E6%8B%9F%E5%8C%96%E9%85%8D%E7%BD%AE/:3:0","tags":null,"title":"LXD虚拟化服务器","uri":"/posts/lxd%E8%99%9A%E6%8B%9F%E5%8C%96%E9%85%8D%E7%BD%AE/"},{"categories":[["计算机"]],"content":"桥接网络配置 eth0: name: eth0 nictype: macvlan parent: enp34s0 type: nic ","date":"2020-07-05","objectID":"/posts/lxd%E8%99%9A%E6%8B%9F%E5%8C%96%E9%85%8D%E7%BD%AE/:4:0","tags":null,"title":"LXD虚拟化服务器","uri":"/posts/lxd%E8%99%9A%E6%8B%9F%E5%8C%96%E9%85%8D%E7%BD%AE/"},{"categories":[["整理","计算机"]],"content":"在C++上配置各种库这件事情是不太容易的。并且在各种平台上可以有各种不同的配置方法。通常我们在使用一个C++库时都具有下面的几个步骤： 下载库源代码 编译库 将库引入到项目中 虽然只有区区几步，但是在实现这些步骤时却需要做很多事情，并且稍有不慎可能就会导致最终的结果完全错误。 基于这个问题，微软开源了跨平台的包管理工具vcpkg，它可以在Windows、Linux和MacOS上运行，只需要用一行命令就可以安装C++库并自动地引入到项目中。 在下面的例子当中我们将尝试自己动手安装一个带有各种支持的OpenCV库。 这篇文章主要针对于Windows系统，如果你需要在Linux、MacOS上配置Vcpkg，请参考这篇微软的文档： ","date":"2019-12-10","objectID":"/posts/%E5%88%A9%E7%94%A8vcpkg%E8%BD%BB%E6%9D%BE%E5%AE%89%E8%A3%85c++%E5%BA%93/:0:0","tags":null,"title":"利用vcpkg轻松安装C++库","uri":"/posts/%E5%88%A9%E7%94%A8vcpkg%E8%BD%BB%E6%9D%BE%E5%AE%89%E8%A3%85c++%E5%BA%93/"},{"categories":[["整理","计算机"]],"content":"配置Vcpkg ","date":"2019-12-10","objectID":"/posts/%E5%88%A9%E7%94%A8vcpkg%E8%BD%BB%E6%9D%BE%E5%AE%89%E8%A3%85c++%E5%BA%93/:1:0","tags":null,"title":"利用vcpkg轻松安装C++库","uri":"/posts/%E5%88%A9%E7%94%A8vcpkg%E8%BD%BB%E6%9D%BE%E5%AE%89%E8%A3%85c++%E5%BA%93/"},{"categories":[["整理","计算机"]],"content":"下载并初始化vcpkg vcpkg的整个程序托管在GitHub上，你可以在下面的链接当中把vcpkg克隆到本地或者直接下载它的压缩包解压到某个你认为正确的地方。之后vcpkg安装的各类库都会放在这个目录下。 https://github.com/Microsoft/vcpkg 我们在vcpkg的根目录（即可以看到bootstrap-vcpkg.bat文件的目录）的地址栏中直接输入powershell并按下回车，这将打开PowerShell窗口，在其中请输入下面的命令并回车初始化vcpkg： ./bootstrap-vcpkg.bat 在执行完毕后，你可以尝试键入下面的命令并回车来验证你的vcpkg已经初始化完成： ./vcpkg version 不出意外你应该可以看到一些版本信息的输出。这可以验证你的vcpkg根目录下已经生成了vcpkg.exe这一文件。请你右击这个文件查看属性，并在常规-\u003e位置这一项上复制其后的地址，在之后，我会将这个路径称为vcpkg的根目录路径。 ","date":"2019-12-10","objectID":"/posts/%E5%88%A9%E7%94%A8vcpkg%E8%BD%BB%E6%9D%BE%E5%AE%89%E8%A3%85c++%E5%BA%93/:1:1","tags":null,"title":"利用vcpkg轻松安装C++库","uri":"/posts/%E5%88%A9%E7%94%A8vcpkg%E8%BD%BB%E6%9D%BE%E5%AE%89%E8%A3%85c++%E5%BA%93/"},{"categories":[["整理","计算机"]],"content":"安装集成 集成是为了让Visual Studio能够直接访问我们安装的库而不需要其他配置，请按下win+x键，然后在弹出的菜单中选择Windows PowerShell (管理员)，并输入命令（请将命令中文字“根目录路径”替换为刚刚复制的vcpkg的根目录路径，注意请保留两侧的引号）： cd \"根目录路径\" 例如我的命令看起来像这样： cd \"C:\\libs\\vcpkg\" 按下回车后，你应该可以看到命令行光标前的目录已经改变。此时，你应该关闭Visual Studio后输入下面的命令并回车： ./vcpkg integrate install 此时你已经安装好了Visual Studio的集成，在Visual Studio创建的项目VC++项目当中你可以直接引入头文件调用该库。如果你的项目是CMake项目，你可能需要将CMAKE_TOOLCHAIN_FILE设置为vcpkg根目录路径/scripts/buildsystems/vcpkg.cmake。这个提示通常在你执行上面的命令后获得的输出的最后一行出现。 ","date":"2019-12-10","objectID":"/posts/%E5%88%A9%E7%94%A8vcpkg%E8%BD%BB%E6%9D%BE%E5%AE%89%E8%A3%85c++%E5%BA%93/:1:2","tags":null,"title":"利用vcpkg轻松安装C++库","uri":"/posts/%E5%88%A9%E7%94%A8vcpkg%E8%BD%BB%E6%9D%BE%E5%AE%89%E8%A3%85c++%E5%BA%93/"},{"categories":[["整理","计算机"]],"content":"安装库 此时vcpkg已经在计算机中被安装好了，请在vcpkg的根目录的地址栏中直接输入powershell并按下回车，这将再次打开PowerShell窗口（你可以注意到PowerShell窗口的标题栏上没有“管理员”字样），在其中请输入下面的命令搜索OpenCV库： ./vcpkg search opencv 可以看到得到的结果中OpenCV后有中括号，其中带有各类支持选项，例如可以选择安装contrib或cuda支持。此处我们可以按照下面的选项在vcpkg中下安装OpenCV（这不是唯一的方法）： ./vcpkg install opencv[nonfree,contrib,ffmpeg]:x64-windows 注意，上面的命令中开启了三个支持开关，你可以自由地删去或增加一些。另外，我们利用冒号:描述了这个库的安装选项，即在Windows平台下使用x64进行编译，如果不特别描述，vcpkg会使用默认的x86-windows设置。在其他系统（例如Linux、MacOS）下也可以设置到对应的操作系统。这一项设置对下面在项目中使用非常重要，如果项目设置为x64平台而库的安装使用了x86平台，由于项目与库的平台不兼容，之后当项目尝试使用库时IntelliSense将不会列出这个库的头文件。 此时按下回车，vcpkg将按照OpenCV的依赖依次安装需要的库，所以不需要担心可能有任何路径上或者依赖上的问题。vcpkg会自动从待安装库的源代码仓库拉去源代码，而通常库的源代码会被托管在GitHub上，由于大陆的网络环境比较特殊，这可能带来几次在下载途中的失败，你可以尝试重新运行上面的命令，也可以为计算机配置代理。安装的过程通常需要持续数分钟到数十分钟。 ","date":"2019-12-10","objectID":"/posts/%E5%88%A9%E7%94%A8vcpkg%E8%BD%BB%E6%9D%BE%E5%AE%89%E8%A3%85c++%E5%BA%93/:2:0","tags":null,"title":"利用vcpkg轻松安装C++库","uri":"/posts/%E5%88%A9%E7%94%A8vcpkg%E8%BD%BB%E6%9D%BE%E5%AE%89%E8%A3%85c++%E5%BA%93/"},{"categories":[["整理","计算机"]],"content":"在项目中引用 在OpenCV安装完成后，你可以打开某个项目或创建某个新项目，并在项目中直接使用安装好的OpenCV库，值得注意的是，如果此前安装的是x64编译选项的库，那么它仅在平台设置为x64的项目中有效，同理，如果安装的是x86选项的库则对应平台设置为x86的项目： 在编译完成后，vcpkg与Visual Studio的集成将能够把所有依赖的动态链接库文件（Dll文件）拷贝到输出的可执行文件（Exe文件）的目录下。所以你的输出目录可能如下图： 如果你只是像上面的动图一样只引用了头文件而没有写任何使用到OpenCV的代码，你的输出目录仍然可能不包括上面的这些动态链接库文件（Dll文件）。这时你可以利用下面的示例代码来输出OpenCV的版本号。 #include \u003ciostream\u003e #include \u003copencv2/opencv.hpp\u003e int main() { std::cout \u003c\u003c CV_VERSION \u003c\u003c std::endl; } 此时，你已经利用vcpkg完成了对OpenCV库的安装。你可以继续尝试安装或使用其他的库。 ","date":"2019-12-10","objectID":"/posts/%E5%88%A9%E7%94%A8vcpkg%E8%BD%BB%E6%9D%BE%E5%AE%89%E8%A3%85c++%E5%BA%93/:3:0","tags":null,"title":"利用vcpkg轻松安装C++库","uri":"/posts/%E5%88%A9%E7%94%A8vcpkg%E8%BD%BB%E6%9D%BE%E5%AE%89%E8%A3%85c++%E5%BA%93/"},{"categories":["随笔"],"content":"有的时候我会写备忘录。 第一次在外省过元旦，恰好缝上南方少见的寒冷天气，可能是南方人对成天的大雪少有体会，以至于这些日子哆哆嗦嗦都不情愿在室外多待一秒钟。对着电脑，实在是不知道要对这一年说些什么，像是旅人与一个当地人的道别，每年如此，遇见再告别，再遇见，再告别，离别都不是那么要紧。而这备忘录，我是当作游记一般，不论因果，不讲得失。如果要看这一年，便就是要读读看自己的“游记”。 我想我早就对跌宕起伏的这一年充满期待。 六月，我参加了高考。自然是令人难忘的备考经历，也是同很多青春电影一样：齐肩高的书，同臂长的考卷，满处的横幅，焦虑的学生以及忧心忡忡地徘徊在走廊的老师们。那段日子固然是辛苦，早早起床，十四个、十五个小时地待在学校，我常告诉别人，这叫“披星戴月”。焦躁地听老师的课，匆忙地收拾东西下课，再不安地接过爸妈送的饭盒。时常，也会为自己的着急，也会在深夜问自己要不要接着坚持下去： 风起于清蘋之上，浪成于微澜之间。 明天会更好。 也是在那段日子，我习惯了每天戴着耳机，在自己的世界里徘徊。彼时也是从冬天一晃就到了烈日当头的日子，完全不似我以前猜测的那般焦灼和煎熬。我想我应当是准备好了的，我想，我是可以没有遗憾地面对结果的。 高考前一天，我写了备忘录： 下午就要开始试坐： 曾经感觉离我甚远的高考，如今也将是站在我跟前了。 曾经一大片的日子，总是期待着长大。而站在岔口，回看来路，才算是体会到——这生命的路看起来很长，长得好像没有尽头，可我们的成长却只是在那几个瞬间，快得好像根本来不及让人准备。 盼着盼着，这一天就这么来了。 可结果并不总是如我所愿，特别的考情依旧还是让我在还算体面的分数上落马。成绩很是平凡，甚至说也是有一些小小地令人失望。我最终被一所普通的一本学校录取，而且也没能报上自己想要的专业。报到那天，妈说：“你也算是了了我一桩心事，妈就是想让你能上到一本。”我没说话，只看着窗外，看着这个陌生又熟悉的城市。后来我站在这所学校门口看着人群往溯，心中想着未来的四年我就将会在这里度过： 是我选择了高考，现在我需要让它变成一个好的决定。 也许是老天的眷顾，它仍想让我尝快一点接受更真实一点的生活，很幸运地我没有忽略掉我要专注的事情。也不知道是经过了怎样的一番际遇我加入了一群研究生的队伍。我得以在我喜欢的方向，也在我喜欢的环境里做研究。我知道，可能接下来的日子我就要做出一点点小改变了。我和懒觉说再见，早上七点手机把我叫醒，然后悄悄地收拾和出门，混入上早课的队伍。早上做一小杯咖啡，再一边确认我的待办列表，就算得上是提醒我这一天开始了。 我会告诉自己想要做的事情： 要学会做一些小前端 想要开始做深度学习 年初那时候，正是享受闲暇的好时机，我心血来潮想要给朋友们做一些电子贺卡。于是找来一台小小的服务器，给之前做的一个发送消息的小应用加上了发送图片的功能。在年三十的晚上，用一个二维码把我的贺卡发给了朋友们。所以从这里开始，我就记下了做前端这件事情。今年大大小小的事情，我一直都在刻意地去多做一些前端，虽然到现在我的前端依旧做得还是不像样子，但终归还是有一点点小小进步。还给自己实现了一个视差滚动的小封装。 十一月份我参加了一个深度学习的小比赛，可能是无知者无畏，和一位学长一起训练出了一个还算不错的模型。到现在，我还没有忘记刚刚开始用Linux配置环境的时候令我抓狂的问题，编译，测试，删除，再编译，再测试，再删除。如此这般，使劲地折腾了一个月才算是勉强能够自己开始配置和编译库。这是我第一次真正跨平台地写代码，好几天，好几周，一块小蛋糕，一杯拿铁，就当是给自己好好努力的奖赏，低头揉揉眼睛，再望望天花板后，虽然发现自己和其他人的距离仍然没有缩短多少，许多工作仍没有完成。喝口咖啡，看看窗外，然后发几分钟呆，想想风从哪吹过，想想风吹过的远方的人。 现在，在与这个温柔而重要的一年说再见的这一刻，我想用轻快，不留一丝遗憾的脚步声，与2018年道别。 回宿舍的路上，呆望着地板，像是走在回到我半年前要回到的住所的路上一般。暗黄的灯光勉强够到我的路，从一辆辆停着的车的空隙间慢慢走过。 相遇是隆重的，而离别是毫无准备的。2018年，就此别过。 2018/12/31 ","date":"2019-01-01","objectID":"/posts/2018%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/:0:0","tags":null,"title":"2018，这一年，我的备忘录","uri":"/posts/2018%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"},{"categories":[["整理","计算机"]],"content":"这段时间装了很多次Caffe，总结了一些方法和经验。此处笔者安装的是带GPU支持的Caffe。但是CPU ONLY的方法与GPU安装差异不大。笔者会在其中说明。 ","date":"2018-11-15","objectID":"/posts/caffe-%E4%BB%A5%E5%8F%8A-caffe-ssd-%E5%9C%A8ubuntu16.04%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE/:0:0","tags":null,"title":"Caffe 以及 Caffe-SSD 的配置","uri":"/posts/caffe-%E4%BB%A5%E5%8F%8A-caffe-ssd-%E5%9C%A8ubuntu16.04%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE/"},{"categories":[["整理","计算机"]],"content":"第一部分 Nvidia 环境安装 这一部分我们需要安装NVIDIA的基本环境，所以，并非使用 Nvidia GPU 的读者以及使用CPU的读者可以跳过这一部分。这一部分主要包括： Nvidia 驱动程序 CUDA（此处我们安装8.0版本） cudnn（此处我们安装6.1版本） ","date":"2018-11-15","objectID":"/posts/caffe-%E4%BB%A5%E5%8F%8A-caffe-ssd-%E5%9C%A8ubuntu16.04%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE/:1:0","tags":null,"title":"Caffe 以及 Caffe-SSD 的配置","uri":"/posts/caffe-%E4%BB%A5%E5%8F%8A-caffe-ssd-%E5%9C%A8ubuntu16.04%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE/"},{"categories":[["整理","计算机"]],"content":"Nvidia 驱动程序 在Ubuntu中，你可以在你的 设置-\u003e软件和更新-\u003e附加驱动 中看到Nvidia的驱动，你可以尝试安装此驱动。当然，如果你希望手动安装，可以到Nvidia的网站选择你的型号来下载驱动程序。 在Ubuntu 16.04中由于系统已经提供了较好的驱动可以直接使用，所以此处推荐直接使用该驱动。驱动安装完成以后可以在终端运行命令nvidia-smi查看GPU信息。 ","date":"2018-11-15","objectID":"/posts/caffe-%E4%BB%A5%E5%8F%8A-caffe-ssd-%E5%9C%A8ubuntu16.04%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE/:1:1","tags":null,"title":"Caffe 以及 Caffe-SSD 的配置","uri":"/posts/caffe-%E4%BB%A5%E5%8F%8A-caffe-ssd-%E5%9C%A8ubuntu16.04%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE/"},{"categories":[["整理","计算机"]],"content":"CUDA 首先你需要到 Nvidia的网站下载CUDA。截至本文撰写前，CUDA Toolkit的最新版本是10.0。此处笔者点击Legacy Releases找到了8.0的版本下载。为了安装方便，笔者选择下载run文件。 下载完成以后，按Ctrl+Alt+F1进入字符终端界面，按照正常方式登陆之后，运行下面的命令： $ sudo service lightdm stop #关闭图形界面 $ sudo bash cuda_8.0.61_375.26_linux.run 此时会出现安装协议，只需要按空格键即可快速跳过，接受协议。之后会询问是否安装驱动。由于我们现在已经安装了 Nvidia驱动，所以已经不需要再安装驱动（注：笔者在不安装Nvidia驱动的情况下直接采用此驱动也会安装失败）。安装完成后，就可以启动图形界面了。 $ sudo service lightdm start 要检查CUDA是否安装完成，可以直接在终端运行nvcc -V即可输出CUDA版本信息。现在我们开始安装cudnn，首先解压cudnn的压缩包到当前文件夹（即一个名为cuda文件夹） $ cd cuda $ cd include $ sudo cp cudnn.h /usr/local/cuda/include/ #复制头文件 $ cd .. $ cd lib64 $ sudo cp lib* /usr/local/cuda/lib64/ #复制动态链接库 $ cd /usr/local/cuda/lib64/ $ sudo chmod +r libcudnn.so.6.0.21 #此处注意笔者安装的是6.0.21版本，你的版本可能与此不同 $ sudo ln -sf libcudnn.so.6.0.21 libcudnn.so.6 #链接到大版本 $ sudo ln -sf libcudnn.so.6 libcudnn.so $ sudo ldconfig #使链接生效 到此时，我们就已经安装好了基本的CUDA环境。接下来，我们需要设定几个环境变量来使得我们的设置生效。如果想要这个设置对所有用户生效，就在命令行运行 sudo gedit /etc/profile 如果仅仅想要对本用户有效，则运行： sudo gedit ~/.bashrc 然后在文件中添加如下内容，其中的cuda版本需要根据你的实际情况进行替换： export PATH=$PATH:/usr/local/cuda-8.0/bin export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-8.0/lib64 export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/cuda-8.0/lib64 保存好之后重启终端或直接运行source ~/.bashrc或source /etc/profile。 到这里CUDA就已经安装完成了，接下来我们就开始安装Caffe。 ","date":"2018-11-15","objectID":"/posts/caffe-%E4%BB%A5%E5%8F%8A-caffe-ssd-%E5%9C%A8ubuntu16.04%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE/:1:2","tags":null,"title":"Caffe 以及 Caffe-SSD 的配置","uri":"/posts/caffe-%E4%BB%A5%E5%8F%8A-caffe-ssd-%E5%9C%A8ubuntu16.04%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE/"},{"categories":[["整理","计算机"]],"content":"Caffe 安装 ","date":"2018-11-15","objectID":"/posts/caffe-%E4%BB%A5%E5%8F%8A-caffe-ssd-%E5%9C%A8ubuntu16.04%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE/:2:0","tags":null,"title":"Caffe 以及 Caffe-SSD 的配置","uri":"/posts/caffe-%E4%BB%A5%E5%8F%8A-caffe-ssd-%E5%9C%A8ubuntu16.04%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE/"},{"categories":[["整理","计算机"]],"content":"安装依赖 首先运行以下命令安装好对应的依赖： $ sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler $ sudo apt-get install --no-install-recommends libboost-all-dev $ sudo apt-get install libopenblas-dev liblapack-dev libatlas-base-dev $ sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev $ sudo apt-get install git cmake build-essential 安装的同时也可以下载对应的Caffe的程序： 如果是安装原版的Caffe： $ git clone https://github.com/BVLC/caffe 如果是安装Caffe-SSD： $ git clone https://github.com/weiliu89/caffe.git caffe-ssd $ cd caffe-ssd $ git checkout ssd 此时caffe文件夹（如果安装的Caffe-SSD即为caffe-ssd）就能够下载到终端当前的文件夹下。依赖安装完成以后，进入到caffe/python文件夹下，运行下面的命令安装python的依赖： $ pip install -r requirements.txt ","date":"2018-11-15","objectID":"/posts/caffe-%E4%BB%A5%E5%8F%8A-caffe-ssd-%E5%9C%A8ubuntu16.04%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE/:2:1","tags":null,"title":"Caffe 以及 Caffe-SSD 的配置","uri":"/posts/caffe-%E4%BB%A5%E5%8F%8A-caffe-ssd-%E5%9C%A8ubuntu16.04%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE/"},{"categories":[["整理","计算机"]],"content":"编译配置 安装完成后回退到Caffe的根目录，制作配置文件： sudo cp Makefile.config.example Makefile.config sudo gedit Makefile.config 编辑其中的内容，将： #USE_CUDNN := 1 前的井号去掉 #OPENCV_VERSION := 3 前的井号去掉 #WITH_PYTHON_LAYER := 1 前的井号去掉 针对一些包含库的路径，将： INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib 替换为： INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial 保存文件后，接下来在根目录下运行下面的命令创建我们的编译目录并打开图形界面的cmake： $ mkdir build $ cmake-gui 将Where is the source code设置为Caffe的根目录，将Where to build the binaries设置为我们刚刚创建的build文件路径。点击Configure按钮列出选项。 值得注意的是，列表中的python_version选项，如果你需要使用python3，则需要将默认的2修改为3。然后勾选上面的Advance多选框。在左侧的搜索框中搜索python，然后修改PYTHON_EXECUTABLE、PYTHON_INCLUDE_DIR、PYTHON_LIBRARY。下面是一个简单的例子。 接下来再搜索CMAKE_CXX_FLAGS并在其中添加-std=c++11以启用编译器C++11标准的支持。 最后点击Generate按钮，即可完成编译的配置。 ","date":"2018-11-15","objectID":"/posts/caffe-%E4%BB%A5%E5%8F%8A-caffe-ssd-%E5%9C%A8ubuntu16.04%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE/:2:2","tags":null,"title":"Caffe 以及 Caffe-SSD 的配置","uri":"/posts/caffe-%E4%BB%A5%E5%8F%8A-caffe-ssd-%E5%9C%A8ubuntu16.04%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE/"},{"categories":[["整理","计算机"]],"content":"编译 编译时先进入到build目录，运行下面的命令： $ make all -j4 #j之后的数字是线程数，可根据cpu的性能进行设置，此处笔者使用的设备为两颗i7 8700所以常设为12或者16。 $ sudo make test $ sudo make runtest 最后当编译完成，runtest也提示pass之后即说明Caffe的安装基本成功。 ","date":"2018-11-15","objectID":"/posts/caffe-%E4%BB%A5%E5%8F%8A-caffe-ssd-%E5%9C%A8ubuntu16.04%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE/:2:3","tags":null,"title":"Caffe 以及 Caffe-SSD 的配置","uri":"/posts/caffe-%E4%BB%A5%E5%8F%8A-caffe-ssd-%E5%9C%A8ubuntu16.04%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE/"},{"categories":[["整理","计算机"]],"content":"编译问题说明 在编译过程中有可能有如下问题，笔者会根据读者的反馈进行增加： libTiff异常：make的最后的链接阶段提示@LIBTIFF_4.0未定义的引用，此时读者应检查opencv的版本是否异常，例如笔者自行编译的opencv3.4.3就与自带的2.4版本有冲突，需要在之前cmake-gui设置的时候把OpenCV_DIR设置为你的OpenCV路径（注意，此路径下需要包含OpenCVConfig.cmake文件，通常是源码安装的OpenCV中的build文件夹下）。如果不是该问题则请检查libTiff是否安装。 ","date":"2018-11-15","objectID":"/posts/caffe-%E4%BB%A5%E5%8F%8A-caffe-ssd-%E5%9C%A8ubuntu16.04%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE/:2:4","tags":null,"title":"Caffe 以及 Caffe-SSD 的配置","uri":"/posts/caffe-%E4%BB%A5%E5%8F%8A-caffe-ssd-%E5%9C%A8ubuntu16.04%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE/"},{"categories":[["整理","计算机"]],"content":"扫尾工作 如果需要在Python中使用Caffe接口，则请运行： 为所有用户设置： sudo gedit /etc/profile 为当前用户设置： sudo gedit ~/.bashrc 在其中添加如下内容（注意其中路径需要替换）： export PYTHONPATH=/path/to/caffe/python:$PYTHONPATH 最后重启终端，或者运行source ~/.bashrc或source /etc/profile即可完成安装。在python中直接： import caffe 若无报错即安装成功。 ","date":"2018-11-15","objectID":"/posts/caffe-%E4%BB%A5%E5%8F%8A-caffe-ssd-%E5%9C%A8ubuntu16.04%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE/:2:5","tags":null,"title":"Caffe 以及 Caffe-SSD 的配置","uri":"/posts/caffe-%E4%BB%A5%E5%8F%8A-caffe-ssd-%E5%9C%A8ubuntu16.04%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE/"},{"categories":[["创作","计算机"]],"content":"介绍 Calenass能够很方便地为你管理你的课程表。它能够创建ics文件，从而将课程安排导入到你的日历当中。方便你进行其他的管理。同时，它还支持导出/导入设置，从而让你更方便地共享你的课程安排。并且，我们同时提供了Windows，MacOS，Linux和Darwin的适用版本。满足不同设备的需求。 ","date":"2018-10-03","objectID":"/posts/calenass-%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86%E8%AF%BE%E7%A8%8B%E6%97%A5%E7%A8%8B/:1:0","tags":null,"title":"Calenass 轻松管理课程日程","uri":"/posts/calenass-%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86%E8%AF%BE%E7%A8%8B%E6%97%A5%E7%A8%8B/"},{"categories":[["创作","计算机"]],"content":"基本设置 在设置面板中，你可以设置好你的课表的显示名称，你最后创建的日历将标识为此名称。 我们了解你课程安排的第一步，就是知道你的上课时间。首先你需要设置第一工作周的开始日期（周一），例如下图中设置的2018-09-03。然后，你需要告诉我们你的一天被划为几个部分（课程时间），例如下图中分别为“第一二节”，“第三四节”，“第五六节”，“第七八节”，“第九十11节”。 点击“添加”按钮，就可以往列表中添加一个课程时间。可以通过点击课程时间的名称来展开它的设置，例如下图中，课程时间的开始时间是16:00，结束时间是17:50。 如此，添加你自己的课程时间后，就可以开始设置课程了。 ","date":"2018-10-03","objectID":"/posts/calenass-%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86%E8%AF%BE%E7%A8%8B%E6%97%A5%E7%A8%8B/:2:0","tags":null,"title":"Calenass 轻松管理课程日程","uri":"/posts/calenass-%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86%E8%AF%BE%E7%A8%8B%E6%97%A5%E7%A8%8B/"},{"categories":[["创作","计算机"]],"content":"添加课程 切换到课程面板。点击末尾的“＋”按钮，即可开始添加课程，值得注意的是，此处的周设置，多个周之间用逗号分隔，并且连续的周可以用短横线（即-）连接。例如下图。单击添加按钮后，即可将课程添加到列表中。 不仅可以如此添加课程，如果一门课有多个上课时间，可以展开对应课程的面板，点击面板中的“＋”按钮进行添加。如下图： 点击课程本身，就可以尝试移除它。需要注意的是，移除后有可能会使课程面板的排列发生变化。 ","date":"2018-10-03","objectID":"/posts/calenass-%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86%E8%AF%BE%E7%A8%8B%E6%97%A5%E7%A8%8B/:3:0","tags":null,"title":"Calenass 轻松管理课程日程","uri":"/posts/calenass-%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86%E8%AF%BE%E7%A8%8B%E6%97%A5%E7%A8%8B/"},{"categories":[["创作","计算机"]],"content":"生成日历文件 在首页面板中，点击“生成日历”按钮，选择保存位置后，即可保存日历文件，值得注意的是，这项功能需要你有网络连接。所以请确保生成时电脑能够连接到网络。 日历文件的使用方法如下： Android设备：部分Android设备可以直接打开日历文件，你可以尝试将日历文件发送到你的Android设备并打开导入日程。 iOS设备：如果你有iOS设备，并且“邮件”应用已经配置好的话。可以直接将日历文件作为邮件附件发送到你的邮箱中并用你的iOS设备查看。点击收到的日历文件即可自动完成配置导入日程。 电脑：在安装有Office Outlook的电脑上，可以直接双击生成的日历文件从而导入。如果你登陆了微软账号，则可以同步到你的微软账号当中。 订阅方式（正在开发）：你可以将日历文件上传到云，获得日历链接，并在对应设备上订阅该日历，即可同步日历到你的设备中。 ","date":"2018-10-03","objectID":"/posts/calenass-%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86%E8%AF%BE%E7%A8%8B%E6%97%A5%E7%A8%8B/:4:0","tags":null,"title":"Calenass 轻松管理课程日程","uri":"/posts/calenass-%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86%E8%AF%BE%E7%A8%8B%E6%97%A5%E7%A8%8B/"},{"categories":[["创作","计算机"]],"content":"为什么要捐赠 开发Calenass纯粹是出于个人的爱好，开发、维护、更新需要付出很多的时间和精力，对于某些功能还需要购买服务器进行支持。这些目前都是由开发者自己承担的。 但是这并不意味着你一定需要为使用这款软件付费，它仍是免费使用的，但是如果你非常喜欢，你可以为之付出任意多的一笔费用来支持它继续更新和运行下去。 非常感谢在我之前的项目中捐赠的朋友们，虽然没能把你们一一列出来，但是你们的帮助仍然给了我很多动力去完善和更新这些项目。 如果你愿意支持这项项目，你可以在“首页”版面下找到“捐赠”按钮，并完成捐赠。 ","date":"2018-10-03","objectID":"/posts/calenass-%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86%E8%AF%BE%E7%A8%8B%E6%97%A5%E7%A8%8B/:5:0","tags":null,"title":"Calenass 轻松管理课程日程","uri":"/posts/calenass-%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86%E8%AF%BE%E7%A8%8B%E6%97%A5%E7%A8%8B/"},{"categories":[["创作","计算机"]],"content":"常见问题 Q：如何拖动Calendar的窗口？ A：我们将窗口的拖动范围缩小了，按住左上角的小logo即可拖动窗口。 ","date":"2018-10-03","objectID":"/posts/calenass-%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86%E8%AF%BE%E7%A8%8B%E6%97%A5%E7%A8%8B/:6:0","tags":null,"title":"Calenass 轻松管理课程日程","uri":"/posts/calenass-%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86%E8%AF%BE%E7%A8%8B%E6%97%A5%E7%A8%8B/"},{"categories":[["创作","计算机"]],"content":"Bug反馈 Calenass仍非常年轻，在运行过程中，它可能会出现一些问题。如果你遇到了任何问题，你都可以尝试联系我来解决。非常期待你的反馈： 邮箱地址：xuzihanapple@live.com 博客地址：www.mrxzh.com ","date":"2018-10-03","objectID":"/posts/calenass-%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86%E8%AF%BE%E7%A8%8B%E6%97%A5%E7%A8%8B/:7:0","tags":null,"title":"Calenass 轻松管理课程日程","uri":"/posts/calenass-%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86%E8%AF%BE%E7%A8%8B%E6%97%A5%E7%A8%8B/"},{"categories":["杂谈"],"content":" 转自少数派，原文链接 作者：張奕源 Nick 2018 年 7 月 18 日，广东省广州市南沙区人民法院（广东自由贸易区南沙片区人民法院）出台《互联网电子数据证据举证、认证规程》，使「微信取证」再次成为公众关注焦点。因此本文将从法律从业人员的角度，聊一聊微信取证（及其它互联网社交软件取证）的相关问题。 （Nick 按：这篇文章由做律师的黛西老师原创，由于她没有 Matrix 帐号，于是假我手发出，希望能对你有所帮助。） ","date":"2018-09-03","objectID":"/posts/%E7%BB%99%E6%AF%8F%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%8F%96%E8%AF%81%E6%8C%87%E5%8D%97%E8%BF%99%E4%BB%B6%E4%BA%8B%E4%B8%8D%E6%98%AF%E6%88%AA%E4%B8%AA%E5%9B%BE%E9%82%A3%E4%B9%88%E7%AE%80%E5%8D%95/:0:0","tags":null,"title":"给每个人的微信取证指南，这件事不是截个图那么简单","uri":"/posts/%E7%BB%99%E6%AF%8F%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%8F%96%E8%AF%81%E6%8C%87%E5%8D%97%E8%BF%99%E4%BB%B6%E4%BA%8B%E4%B8%8D%E6%98%AF%E6%88%AA%E4%B8%AA%E5%9B%BE%E9%82%A3%E4%B9%88%E7%AE%80%E5%8D%95/"},{"categories":["杂谈"],"content":"微信取证的基本原则 此前，微信、QQ 等互联网社交软件的取证就已经被纳入有效证据的范畴，此次举证规程的出台再度明确了软件取证的各项细节。整个过程并非部分网友想象的「只是截截聊天记录」那么简单，它需要形成一套完整的证据链条。 在开始取证前，建议你先了解微信取证的一些基本原则，便于你举一反三： **微信聊天记录作为证据要符合「合法性、真实性、关联性」的「三性」特征。**即微信聊天记录要依法取得、来源合法；所表达的事实或内容真实；与待证事实密切相关。 与案件事实有关的内容不得选择性提供：微信聊天记录应当完整地反映对话过程，与案件事实有关的内容不得选择性提供，法庭可以要求补充提供指定期间内的完整对话记录。需要注意的是：如果故意选择性提供对话记录内容，将承担相应的法律后果。 注意保留微信聊天记录中对方身份的证据：可以采取对方的自认、手机号码锁定、通过聊天细节、微信头像、微信相册、朋友圈等方式确认，必要时也可以请求腾讯公司协助调查。 所有证据及时固定，善于利用微信收藏：所有证据都尽可能在第一时间固定保存，避免对方撤回、删改等。对于图片、视频等有保存期限的格式，应注意及时下载或收藏，避免证据灭失而无法举证。 简单地说，微信取证不仅要截取聊天记录，还要通过截图、录像等手段向法庭证明截图中的对话双方就是当事人本人。 微信取证虽然还有其他的注意点，但了解上面四条足以帮助你避开手机操作过程中可能发生的错误。接下来看看微信取证的正确处理方式。 ","date":"2018-09-03","objectID":"/posts/%E7%BB%99%E6%AF%8F%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%8F%96%E8%AF%81%E6%8C%87%E5%8D%97%E8%BF%99%E4%BB%B6%E4%BA%8B%E4%B8%8D%E6%98%AF%E6%88%AA%E4%B8%AA%E5%9B%BE%E9%82%A3%E4%B9%88%E7%AE%80%E5%8D%95/:1:0","tags":null,"title":"给每个人的微信取证指南，这件事不是截个图那么简单","uri":"/posts/%E7%BB%99%E6%AF%8F%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%8F%96%E8%AF%81%E6%8C%87%E5%8D%97%E8%BF%99%E4%BB%B6%E4%BA%8B%E4%B8%8D%E6%98%AF%E6%88%AA%E4%B8%AA%E5%9B%BE%E9%82%A3%E4%B9%88%E7%AE%80%E5%8D%95/"},{"categories":["杂谈"],"content":"微信取证的方式 司法实践中，微信聊天记录取证多采取截图 + 录像的方式。截图即对微信聊天记录静态固定，录像即对取证过程动态固定。 下面以王 XX 诉李 XX 转让合同纠纷案所涉微信记录为例，展示具体取证步骤。即使你不熟悉固定证据的流程，也可以按照下面给出的范例一一截图（图片隐私经打码处理，正常取证步骤无需打码）： 固定本人信息界面（证明你的微信确实是你的）：证明本人持有微信聊天记录的合法性和本人身份的真实性。 搜索并固定对方个人信息界面（证明对方的微信确实是他的）：借助微信号不可更改的特点，结合个人信息界面中显示的手机号码、头像等信息固定对方当事人的真实身份。群聊天记录需要截取群信息界面及逐个截取有关人员的个人信息界面。 固定聊天记录（证明你们的确说过那些话）：据微信聊天记录在使用终端中只能删除不能添加的特点，比对双方各自微信客户端中完整聊天信息，以验证相关信息的完整性和真实性。 含有音频的，提交与音频内容一致的文字文本。 含有图片、文本的，提交图片、文本文件打印件，即把对话中的图片、表格等单独打印出来。 这样微信取证就基本完成了。 ","date":"2018-09-03","objectID":"/posts/%E7%BB%99%E6%AF%8F%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%8F%96%E8%AF%81%E6%8C%87%E5%8D%97%E8%BF%99%E4%BB%B6%E4%BA%8B%E4%B8%8D%E6%98%AF%E6%88%AA%E4%B8%AA%E5%9B%BE%E9%82%A3%E4%B9%88%E7%AE%80%E5%8D%95/:2:0","tags":null,"title":"给每个人的微信取证指南，这件事不是截个图那么简单","uri":"/posts/%E7%BB%99%E6%AF%8F%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%8F%96%E8%AF%81%E6%8C%87%E5%8D%97%E8%BF%99%E4%BB%B6%E4%BA%8B%E4%B8%8D%E6%98%AF%E6%88%AA%E4%B8%AA%E5%9B%BE%E9%82%A3%E4%B9%88%E7%AE%80%E5%8D%95/"},{"categories":["杂谈"],"content":"微信取证的更多注意事项 截图并不是微信取证的全部，在截图完毕之后你还需要了解一些法律方面的注意事项，以避免后续鉴定、质证时可能产生的问题。 可通过公证或加盖时间戳形式强化证据：目前通常采取的证据固定方式主要有公证和电子证据固化加盖时间戳等形式。 可通过鉴定确认真实性，微信使用人对自己的辩解承担举证责任：只要你对对方出具证据的真实性有所怀疑，都可以申请司法鉴定（通常需要负担一定的鉴定费用）。 在社交软件范畴内，司法鉴定会检查和判断你的截图内容是否与真实聊天内容相符、是否由对话生成器生成、是否有删改等，还会判断截图期间当事人的账号是否处于被盗或异常状态。 应保存好原始储存设备并接受当庭质证：当事人应保存好电子证据的原始载体以便在法庭上出示，原始载体包括储存有电子数据的手机、计算机或者其它电子设备等。 这是非法律专业人士在固定证据时常常忽略的一点。简言之，你不仅要保留截图记录，还好保留这段对话发生时你用于跟对方聊天的那部电子设备（如电脑、手机等）。在案件审理过程中，法庭不一定会要求你出示原始设备，但如果对方提出质疑申请鉴定，原始设备就起到了关键作用。 应尽量提供其它证据予以佐证：使用支付、转账、红包等功能，应提供支付转账证明；微信聊天记录如果能够与供货单、借条、转账凭证等证据相互印证将更易被采信。 仅有微信证据而无其他证据佐证的，存在不予采信的风险。 ","date":"2018-09-03","objectID":"/posts/%E7%BB%99%E6%AF%8F%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%8F%96%E8%AF%81%E6%8C%87%E5%8D%97%E8%BF%99%E4%BB%B6%E4%BA%8B%E4%B8%8D%E6%98%AF%E6%88%AA%E4%B8%AA%E5%9B%BE%E9%82%A3%E4%B9%88%E7%AE%80%E5%8D%95/:3:0","tags":null,"title":"给每个人的微信取证指南，这件事不是截个图那么简单","uri":"/posts/%E7%BB%99%E6%AF%8F%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%8F%96%E8%AF%81%E6%8C%87%E5%8D%97%E8%BF%99%E4%BB%B6%E4%BA%8B%E4%B8%8D%E6%98%AF%E6%88%AA%E4%B8%AA%E5%9B%BE%E9%82%A3%E4%B9%88%E7%AE%80%E5%8D%95/"},{"categories":["杂谈"],"content":"法律知识拓展 本部分重点告诉你微信取证在法律层面的依据和要求，帮助你更深入地了解包含微信在内的互联网社交工具取证。 微信聊天记录作为证据的法律依据： 《中华人民共和国民事诉讼法》第六十三条规定电子数据属于法定证据形式。《最高人民法院关于适用〈中华人民共和国民事诉讼法〉的解释》第一百一十六条对电子数据进一步解释：电子数据是指通过电子邮件、电子数据交换、网上聊天记录、博客、微博客、手机短信、电子签名、域名等形成或者存储在电子介质中的信息。 《中华人民共和国电子签名法》第三条至第七条：当事人约定使用电子签名、数据电文的文书，不得仅因为其采用电子签名、数据电文的形式而否定其法律效力；能够有形地表现所载内容，并可以随时调取查用的数据电文，视为符合法律、法规要求的书面形式。 微信聊天记录作为证据的要求： 符合数据电文的原件形式要求：（一）能够有效地表现所载内容并可供随时调取查用；（二）能够可靠地保证自最终形成时起，内容保持完整、未被更改。但是，在数据电文上增加背书以及数据交换、储存和显示过程中发生的形式变化不影响数据电文的完整性。 符合数据电文的文件保存要求：（一）能够有效地表现所载内容并可供随时调取查用；（二）数据电文的格式与其生成、发送或者接收时的格式相同，或者格式不相同但是能够准确表现原来生成、发送或者接收的内容；（三）能够识别数据电文的发件人、收件人以及发送、接收的时间。数据电文不得仅因为其是以电子、光学、磁或者类似手段生成、发送、接收或者储存的而被拒绝作为证据使用。 ","date":"2018-09-03","objectID":"/posts/%E7%BB%99%E6%AF%8F%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%8F%96%E8%AF%81%E6%8C%87%E5%8D%97%E8%BF%99%E4%BB%B6%E4%BA%8B%E4%B8%8D%E6%98%AF%E6%88%AA%E4%B8%AA%E5%9B%BE%E9%82%A3%E4%B9%88%E7%AE%80%E5%8D%95/:4:0","tags":null,"title":"给每个人的微信取证指南，这件事不是截个图那么简单","uri":"/posts/%E7%BB%99%E6%AF%8F%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%8F%96%E8%AF%81%E6%8C%87%E5%8D%97%E8%BF%99%E4%BB%B6%E4%BA%8B%E4%B8%8D%E6%98%AF%E6%88%AA%E4%B8%AA%E5%9B%BE%E9%82%A3%E4%B9%88%E7%AE%80%E5%8D%95/"},{"categories":[["创作","计算机"]],"content":"介绍 Crypto++是一个非常优秀的跨平台的C++库，其中支持了众多加密和编码的算法。但是由于其调用逻辑和使用有的时候比较繁琐，为了避免重复的工作，这个项目用于存储对于crypto++的一些封装函数，尽可能做到一个功能一行代码直接调用完成。如下是关于封装库的使用说明，如果有任何不严谨的或错误的地方，欢迎指出。 ","date":"2018-08-26","objectID":"/posts/cryptopp%E5%BA%93%E7%9A%84%E5%B0%81%E8%A3%85cryptoppw/:1:0","tags":null,"title":"Crypto++库的封装：crypto++ wrap","uri":"/posts/cryptopp%E5%BA%93%E7%9A%84%E5%B0%81%E8%A3%85cryptoppw/"},{"categories":[["创作","计算机"]],"content":"代码地址 Github: https://github.com/StephanXu/cryptoppw 在Github中我也贴出了下面的使用说明，展现效果可能比博客中的更好，请移步到Github中阅读。 ","date":"2018-08-26","objectID":"/posts/cryptopp%E5%BA%93%E7%9A%84%E5%B0%81%E8%A3%85cryptoppw/:2:0","tags":null,"title":"Crypto++库的封装：crypto++ wrap","uri":"/posts/cryptopp%E5%BA%93%E7%9A%84%E5%B0%81%E8%A3%85cryptoppw/"},{"categories":[["创作","计算机"]],"content":"函数使用说明 ","date":"2018-08-26","objectID":"/posts/cryptopp%E5%BA%93%E7%9A%84%E5%B0%81%E8%A3%85cryptoppw/:3:0","tags":null,"title":"Crypto++库的封装：crypto++ wrap","uri":"/posts/cryptopp%E5%BA%93%E7%9A%84%E5%B0%81%E8%A3%85cryptoppw/"},{"categories":[["创作","计算机"]],"content":"AES 算法 文件为aes文件夹下的两个文件，使用头文件中声明的两个函数即可。如下是使用说明。 CBC_AESEncryptStr std::string CBC_AESEncryptStr(std::string sKey, std::string sIV, const char *plainText); 描述：AES算法加密字符串 返回值：(std::string)加密结果 参数名 类型 备注 sKey std::string 32位长度密钥 sIV std::string 16位长度IV plainText const char* 待加密的字符串 CBC_AESDecryptStr std::string CBC_AESDecryptStr(std::string sKey, std::string sIV, const char *cipherText); 描述：解密AES加密后的字符串 返回值：(std::string)解密结果 参数名 类型 备注 sKey std::string 32位长度密钥 sIV std::string 16位长度IV cipherText const char* 待解密的字符串 ","date":"2018-08-26","objectID":"/posts/cryptopp%E5%BA%93%E7%9A%84%E5%B0%81%E8%A3%85cryptoppw/:3:1","tags":null,"title":"Crypto++库的封装：crypto++ wrap","uri":"/posts/cryptopp%E5%BA%93%E7%9A%84%E5%B0%81%E8%A3%85cryptoppw/"},{"categories":[["创作","计算机"]],"content":"RSA算法 GenerateKey void GenerateKey(string \u0026 public_key, string \u0026 private_key, unsigned int key_size); 描述：生成密钥对 返回值：void 参数名 类型 备注 public_key string\u0026 返回生成的公钥 private_key string\u0026 返回生成的私钥 key_size unsigned int 密钥长度（例如1024） RSA_Encrypt int RSA_Encrypt(string \u0026 public_key, string source, string \u0026 encrypted); 描述：RSA解密 返回值：(int)加密正常返回1，返回-1为字符串过长 参数名 类型 备注 public_key string\u0026 公钥 source string 待加密字符串 encrypted string\u0026 加密后字符串 RSA_Decrypt int RSA_Decrypt(string \u0026 private_key, string source, string \u0026 decrypted); 描述：RSA加密 返回值：(int)解密正常返回1 参数名 类型 备注 private_key string\u0026 私钥 source string 待解密字符串 decrypted string\u0026 解密后字符串 RSA_EncryptBySection int RSA_EncryptBySection(string \u0026 public_key, string source, string \u0026 encrypted, int section_length); 描述：RSA分段加密，此函数常用于超长字符串的加密。将字符串定长地分割为若干段后进行加密，然后拼接。 返回值：(int)加密正常返回1 参数名 类型 备注 public_key string\u0026 公钥 source string 待加密字符串 decrypted string\u0026 加密后字符串 section_length int 单段长度 RSA_EncryptBySection int RSA_DecryptBySection(string \u0026 private_key, string source, string \u0026 decrypted, int section_length); 描述：RSA分段解密，此函数常用于解密RSA_EncryptBySection加密的字符串，当然，如果是其他平台/语言使用类似的逻辑进行加密的字符串同样也可以解密。 返回值：(int)解密正常返回1 参数名 类型 备注 private_key string\u0026 私钥 source string 待解密字符串 decrypted string\u0026 解密后字符串 section_length int 单段长度，需要注意的是，这里的单段长度程序是会直接对source中的字符串进行分割，需要使用者自行计算好明文单段长度加密后的密文长度来对应解密，详情请参阅本节备注。 备注：关于分段解密的section_length参数 关于分段加密，笔者想做下面的说明。RSA算法对明文是有长度限制的，所以我们在加密超长字符串的时候，有时候采用一种分段加密的手法。因为我们知道，密文的长度与密钥的长度是一样的。例如我们已经生成了一对1024位的密钥，假设我们使用RSA_EncryptBySection函数加密，并将section_length设置为64，那么我们在解密的时候就可以使用RSA_EncryptBySection函数并给section_length设置为256。原因很简单，我们的密文使用了十六进制来编码，所以256个字符实际上对应的是128字节，也就是1024位。用户请自行根据你的密钥长度来进行分段加密和解密。 ","date":"2018-08-26","objectID":"/posts/cryptopp%E5%BA%93%E7%9A%84%E5%B0%81%E8%A3%85cryptoppw/:3:2","tags":null,"title":"Crypto++库的封装：crypto++ wrap","uri":"/posts/cryptopp%E5%BA%93%E7%9A%84%E5%B0%81%E8%A3%85cryptoppw/"},{"categories":["创作"],"content":"视频地址（若手机无法打开请使用下面的地址）： https://www.bilibili.com/video/av29745343/ ","date":"2018-08-23","objectID":"/posts/%E6%88%90%E9%83%BD%E9%87%8D%E5%BA%862018%E6%97%85%E6%8B%8D/:0:0","tags":null,"title":"成都重庆，2018，旅拍","uri":"/posts/%E6%88%90%E9%83%BD%E9%87%8D%E5%BA%862018%E6%97%85%E6%8B%8D/"},{"categories":["创作"],"content":" Author:徐梓涵 ©Copyright 2018 Stephan Xu all rights reserved. ","date":"2018-07-21","objectID":"/posts/%E6%88%91%E5%9C%A8/:0:0","tags":null,"title":"“我在” 毕业去向统计帮手","uri":"/posts/%E6%88%91%E5%9C%A8/"},{"categories":["创作"],"content":"0. 用户 “我在”的信息载体是用户，一个用户可以在设置好自己的信息以后，加入多个不同的小组。也可以创建多个不同的小组，以便于适合统计多个集体关系的信息。 这样设计可以方便用户尽可能方便的让自己加入到集体中，也可以方便集体更加快速宏观正确地获得成员的信息，并最终获得用户画像。 ","date":"2018-07-21","objectID":"/posts/%E6%88%91%E5%9C%A8/:1:0","tags":null,"title":"“我在” 毕业去向统计帮手","uri":"/posts/%E6%88%91%E5%9C%A8/"},{"categories":["创作"],"content":"1. 创建小组 如果要发起一个统计，你需要创建一个小组，让你的朋友们通过小组的二维码受邀加入，他们便可以与其他小组成员共享信息。 在“主页”中，点击“创建小组”即可开始创建一个小组。创建小组需要如下几个信息： 小组名：小组的名称，用于在标题处显示 小组代号：小组的代号，用户在URL中作为唯一标识 小组说明：用于向你的朋友们阐述你的小组 在创建小组后，就可以在“主页”看到已经加入的小组了。 ","date":"2018-07-21","objectID":"/posts/%E6%88%91%E5%9C%A8/:2:0","tags":null,"title":"“我在” 毕业去向统计帮手","uri":"/posts/%E6%88%91%E5%9C%A8/"},{"categories":["创作"],"content":"2. 邀请朋友 当你的朋友们收到你的二维码，在扫描后，如果他们已经登陆，就可以直接确认受邀并加入小组。如果他们没有登陆，可以选择登陆后再加入小组，或者直接注册账号并加入。这在收到邀请后的注册页面有所体现。 ","date":"2018-07-21","objectID":"/posts/%E6%88%91%E5%9C%A8/:3:0","tags":null,"title":"“我在” 毕业去向统计帮手","uri":"/posts/%E6%88%91%E5%9C%A8/"},{"categories":["创作"],"content":"3. 访问 立即访问 ","date":"2018-07-21","objectID":"/posts/%E6%88%91%E5%9C%A8/:4:0","tags":null,"title":"“我在” 毕业去向统计帮手","uri":"/posts/%E6%88%91%E5%9C%A8/"},{"categories":["随笔"],"content":"写在高考前：才子词人，自是白衣卿相 正在去试坐的路上。 ","date":"2018-06-06","objectID":"/posts/%E5%86%99%E5%9C%A8%E9%AB%98%E8%80%83%E5%89%8D%E6%89%8D%E5%AD%90%E8%AF%8D%E4%BA%BA%E8%87%AA%E6%98%AF%E7%99%BD%E8%A1%A3%E5%8D%BF%E7%9B%B8/:0:0","tags":null,"title":"写在高考前：才子词人，自是白衣卿相","uri":"/posts/%E5%86%99%E5%9C%A8%E9%AB%98%E8%80%83%E5%89%8D%E6%89%8D%E5%AD%90%E8%AF%8D%E4%BA%BA%E8%87%AA%E6%98%AF%E7%99%BD%E8%A1%A3%E5%8D%BF%E7%9B%B8/"},{"categories":["随笔"],"content":"壹 曾经感觉离我甚远的高考，如今也将是站在我跟前了。千般荒凉，以此为梦，虽然一切过去仿佛都还似在昨日般新鲜，却是早已渍上泛黄的痕迹。 曾经一大片的日子，总是期待着长大，肆意地挥霍着时间，想要它快些过去。如今站在这岔口，回看万里蹀躞，才算是体会到，这生命的路看起来很长，长到没人能够等到尽头，可成长却只需要几个瞬间，好像根本来不及让人准备。盼着盼着，在期待和不安中，这一天就这么来了。 ","date":"2018-06-06","objectID":"/posts/%E5%86%99%E5%9C%A8%E9%AB%98%E8%80%83%E5%89%8D%E6%89%8D%E5%AD%90%E8%AF%8D%E4%BA%BA%E8%87%AA%E6%98%AF%E7%99%BD%E8%A1%A3%E5%8D%BF%E7%9B%B8/:1:0","tags":null,"title":"写在高考前：才子词人，自是白衣卿相","uri":"/posts/%E5%86%99%E5%9C%A8%E9%AB%98%E8%80%83%E5%89%8D%E6%89%8D%E5%AD%90%E8%AF%8D%E4%BA%BA%E8%87%AA%E6%98%AF%E7%99%BD%E8%A1%A3%E5%8D%BF%E7%9B%B8/"},{"categories":["随笔"],"content":"贰 我选择了高考，我知道这并不会是唯一的路，可是却有这么多人同我一样毅然把十余年的辛苦押注于此，我们知道，有的人会赢，有的人会输，还有的人输了却又赢了。这都是我们的选择，值得不值得决不仅仅由结果决定。 We choose to go to the moon in this decade and do the other things, not because they are easy, but because they are hard, because that goal will serve to organize and measure the best of our energies and skills, because that challenge is one that we are willing to accept, one we are unwilling to postpone, and one which we intend to win. 这的确是一场残忍的竞争，可这并非是我们与这个时代的决战，这只是我们所有人的开始，向下的通道始终敞开着，如果没有积累，只会往下走。为了我们的选择，我们披星戴月，甚至挑灯夜战，夜以继日，没有半点退缩，像似重复着每一个“过来人”的样子。我很清楚我在做什么，也很清楚我要做什么，决非仅仅是眼前的这场考试。 人总是要相信些什么的，这一路上尽管并非十分如意，可飘风不终朝，骤雨不终日，路途总是会有顽石横在当中的。上上下下，于我，我知道那成绩的飘忽不定，也知道这豪赌风险几何，不过无妨，一切成败毕竟都将出自我手，一路艰难，且挨过三冬四夏，暂受些痛苦，雪静后再看梅花。 总有一些人会不断地接受挑战，因为他们终其一生都在寻找自己生命的边界。 昔日终究当属过去，希冀才应贯穿始末。 We choose to go to the Moon. 不后悔，不回头，只往前走。 不停滞，不哀叹，且看今朝。 何须论得丧，才子词人，自是白衣卿相。 徐梓涵 2018年 初夏 ","date":"2018-06-06","objectID":"/posts/%E5%86%99%E5%9C%A8%E9%AB%98%E8%80%83%E5%89%8D%E6%89%8D%E5%AD%90%E8%AF%8D%E4%BA%BA%E8%87%AA%E6%98%AF%E7%99%BD%E8%A1%A3%E5%8D%BF%E7%9B%B8/:2:0","tags":null,"title":"写在高考前：才子词人，自是白衣卿相","uri":"/posts/%E5%86%99%E5%9C%A8%E9%AB%98%E8%80%83%E5%89%8D%E6%89%8D%E5%AD%90%E8%AF%8D%E4%BA%BA%E8%87%AA%E6%98%AF%E7%99%BD%E8%A1%A3%E5%8D%BF%E7%9B%B8/"},{"categories":["杂谈"],"content":" 您好，请问你是139********的机主对吗？我们这边最新推出了一个新套餐……balabala……价格上呢真的是十分优惠。现在就帮您办理了好吗？ 如上电话想必是许多移动用户“喜闻乐见”的了。别的运营商笔者暂时没有使用过所以不敢妄言。如此电话，语速快，甚至有时候断断续续并不容易听清楚。如果慌乱之中连忙答“是”，那么就只好恭喜客官，成功升级下月套餐。 本文作为一个后续，之前因为插入广告的事情投诉的过程，请查看前文： 点这里看前文 ","date":"2018-05-30","objectID":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A22%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E7%94%B5%E8%AF%9D%E6%8E%A8%E9%94%80%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/:0:0","tags":null,"title":"店大不能欺客（2），被中移动电话推销维权实录","uri":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A22%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E7%94%B5%E8%AF%9D%E6%8E%A8%E9%94%80%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/"},{"categories":["杂谈"],"content":"壹 ","date":"2018-05-30","objectID":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A22%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E7%94%B5%E8%AF%9D%E6%8E%A8%E9%94%80%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/:1:0","tags":null,"title":"店大不能欺客（2），被中移动电话推销维权实录","uri":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A22%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E7%94%B5%E8%AF%9D%E6%8E%A8%E9%94%80%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/"},{"categories":["杂谈"],"content":"令人头疼的推销电话 是的，我同样饱受这样的困扰。他们每周或者每月都会不厌其烦地向我推荐一些根本就不优惠的套餐。 有趣的是，在回复不需要之后，他们仍旧会一直……一直……一直不停打电话。 可惜我没有保存当时的通话记录，否则下面将会有一个占满页面的推销电话页面。 于是，在某一次接到电话以后，我打断了她的话：“请你等一下，让我说一句，我已经很多次接到你们的电话了，现在我表示以后在也不要接到你们的电话了，如果你们继续给我打电话，我会向工信部进行投诉。”对方草草表示打扰便挂断了电话。 ","date":"2018-05-30","objectID":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A22%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E7%94%B5%E8%AF%9D%E6%8E%A8%E9%94%80%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/:1:1","tags":null,"title":"店大不能欺客（2），被中移动电话推销维权实录","uri":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A22%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E7%94%B5%E8%AF%9D%E6%8E%A8%E9%94%80%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/"},{"categories":["杂谈"],"content":"自以为解决了一切 以为一切都解决了的我，就这样美滋滋地过着自己的生活，直到一个星期后再次接到电话：“您好，请问您是……的机主对吗，我们现在……”“慢着！”还没等她讲完，我打断了她，“我上次不是已经跟你们说清楚了吗，现在我会去投诉你们。”对方表示抱歉打扰后又挂掉了电话。 ","date":"2018-05-30","objectID":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A22%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E7%94%B5%E8%AF%9D%E6%8E%A8%E9%94%80%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/:1:2","tags":null,"title":"店大不能欺客（2），被中移动电话推销维权实录","uri":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A22%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E7%94%B5%E8%AF%9D%E6%8E%A8%E9%94%80%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/"},{"categories":["杂谈"],"content":"果断维权 嘿我这暴脾气…… 感受到一阵被耍的感觉以后，我截图了几个通话记录后，便开始拟邮件 发好邮件之后，接下来就是等待移动方面的回应了。 于是在发完邮件的第三天，接到移动公司的电话。 对方表示希望我能提供几个打过来的销售电话，在我提供电话之后，对方给出的解释是我有可能在其他营业厅办理业务的时候被记录了电话号码，然后这些营业厅为了增加业绩（因为很多人会选择在网上营业厅或者是直接打电话办理业务），便开始逐个推销。也就是说，按照移动方面的说法，这些电话并不是移动公司委托的，而是其部分营业厅的违规行为。对方也表示其公司内部也在严查这样的行为，且难以追查，所以希望我也能给予包容。 虽然不知道这样的说法是否的确是事实，但根据移动方面的来电我也只能暂且如此认为。且对方也主动表示，会向上级申请给予话费补偿。 ","date":"2018-05-30","objectID":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A22%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E7%94%B5%E8%AF%9D%E6%8E%A8%E9%94%80%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/:1:3","tags":null,"title":"店大不能欺客（2），被中移动电话推销维权实录","uri":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A22%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E7%94%B5%E8%AF%9D%E6%8E%A8%E9%94%80%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/"},{"categories":["杂谈"],"content":"后续 截至到发稿（同年5月30日），我还没有接到类似的推广电话。对方承诺的补偿也已经收到。整个过程比较顺利 ","date":"2018-05-30","objectID":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A22%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E7%94%B5%E8%AF%9D%E6%8E%A8%E9%94%80%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/:1:4","tags":null,"title":"店大不能欺客（2），被中移动电话推销维权实录","uri":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A22%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E7%94%B5%E8%AF%9D%E6%8E%A8%E9%94%80%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/"},{"categories":["杂谈"],"content":"贰 其实如此电话我们的确是经常接到，甚至曾经用过一段时间的联通卡，在话费没剩多少的时候还会有人亲切地打电话过来提醒我交话费。 可问题是，这些“服务”我们既没有预期接受，也没有取消的途径。没有明确的法律规定，也由于是一个擦边球的行为。所以，这样的乱象，确实是需要很多人共同来为之付出努力。维护权利的方式并不麻烦，有的时候仅仅是需要拟一封再简单不过的邮件就可以解决困扰了很久的问题。 很多时候，人，总要去相信些什么。相信黑的不会变成白的，相信这个世界会有公平和正义存在。 2018年 夏 ","date":"2018-05-30","objectID":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A22%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E7%94%B5%E8%AF%9D%E6%8E%A8%E9%94%80%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/:2:0","tags":null,"title":"店大不能欺客（2），被中移动电话推销维权实录","uri":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A22%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E7%94%B5%E8%AF%9D%E6%8E%A8%E9%94%80%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/"},{"categories":["随笔"],"content":"三月初五 谷雨 徐梓涵 三年了，也许是时候与这个播放器说再见了，因为——它早就不再像个播放器了。 ","date":"2018-04-20","objectID":"/posts/%E5%86%8D%E8%A7%81%E7%BD%91%E6%98%93%E4%BA%91/:0:0","tags":null,"title":"再见，网易云音乐","uri":"/posts/%E5%86%8D%E8%A7%81%E7%BD%91%E6%98%93%E4%BA%91/"},{"categories":["随笔"],"content":"壹 当时喜欢上这样一个播放器，是真的喜欢呀，干净，清净，素净。私人FM，每日推荐……都是特别惹人喜欢，它也总是给我的歌单里增添新的惊喜。 我喜欢用它听电音，听流行，听古典，听歌剧……真的很喜欢。 至于评论区，看的是并不多的，即便是广为诟病的编段子，编故事于我而言也还算不得不能接受。偶尔看看别人对曲子的看法，看看音乐人的互动也不失是一种乐趣。 于是，我慢慢地到了9级，不算高，但足够说明我是常用它的。 ","date":"2018-04-20","objectID":"/posts/%E5%86%8D%E8%A7%81%E7%BD%91%E6%98%93%E4%BA%91/:1:0","tags":null,"title":"再见，网易云音乐","uri":"/posts/%E5%86%8D%E8%A7%81%E7%BD%91%E6%98%93%E4%BA%91/"},{"categories":["随笔"],"content":"贰 直到“版权共享99%”出台那一天，我与一哥们“煮酒论英雄”，尽管彼时的我仍旧喜爱着网易云并且希望它可以发展得更加好，可我却更看好QQ音乐的发展趋势。我曾以为一旦独家版权的形势不再那么“严峻”，客户端的体验就显得更重要，而这个方面，我的确是揣测网易云的产品设计团队会跟不上腾讯（毕竟对于腾讯多年对于社交平台方面的经验来说，至少在国内市场是无可匹敌的），尤其是在网易云赚足吆喝的“私人FM”和“每日推荐”上很有可能被腾讯超车，加上腾讯的财力和庞大的用户基数，优势是更加明显的。 可接下来的事实让我觉得我可能多虑了，其一，99%的曲库共享，却没办法动摇最核心的一部分独家版权，于是乎真正用来交换的版权似乎就显得很少很少了。似乎版权的问题并不能得到真正的解决。 其二，网易自己的确有可能“自己把一副好牌打的稀烂”。我没办法明白网易的产品团队如何思考，可呈现在用户面前的的确是一个播放器，社交平台，小视频和电商混杂在一起的产品。尤其是将视频按钮放到了主菜单的第二项这一项举措。不知道是不是网易早已察觉到用户群体的变化，高端用户的蒸发已经造成了一些颓势，所以向更加大众和多元的方面转型可能会是一个不错的选择。这样做固然可以让这么一个难变现的产品迅速获得经济效益，也可以让它活的更长久，可是，作为一个因为纯粹和简单而选择网易云的人，迟早是会离开的。 是的，单纯的音乐平台想要变现太困难了。 于是网易云加入了广告，并且在每一次打开App，甚至是在长时间驻留后台后，都会加入差不多四秒多的启动广告，硬生生地把在iOS（ip6sp）上的启动时间延长到了7-10秒左右（不幸的是，“跳过”按钮通常是没有办法立刻跳过的） 在“私人FM”中，有的进驻在网易云的小音乐人的作品，即便是同一首歌点过许多次垃圾桶，网易云仍会不厌其烦地推送。 社区一旦是流行起来，大多是要走下坡路的，不能说是运营方面的失策，而是用户群慢慢地变了，简单地说，原有的“精华用户”并不愿意看到许多人往里头扎堆，可这些“精华用户”所产生的内容却让越来越多各个层次的人想要加入进来。于是，似乎不可避免地，所有的社区都出现了这样的“用户蒸发”现象。 毕竟各种H5，各种“奇形怪状”的话题，各种抖机灵的推送，并不是所有用户都想要看到的。 可网易太想做社交了，它想要在中国建立一个从音乐到社区的闭环，可步大扯蛋，想要做到这点，着实需要长远的布局和投入。一方面肆意贱卖情怀，拿热评和H5讨好用户，一方面却不愿意投入更多的钱改进版权现状和App。 说来， 真的没有那么多情怀，做产品的，不盈利才是最可恶的。 可有些人眼里“万恶”的腾讯的确就是花了大价钱买到了版权。所有的所有，都是不偷不抢一个个子儿换来的独家版权，这无可非议。这是价值的交换，不是靠文案和营销热评拿来的。 ","date":"2018-04-20","objectID":"/posts/%E5%86%8D%E8%A7%81%E7%BD%91%E6%98%93%E4%BA%91/:2:0","tags":null,"title":"再见，网易云音乐","uri":"/posts/%E5%86%8D%E8%A7%81%E7%BD%91%E6%98%93%E4%BA%91/"},{"categories":["随笔"],"content":"叁 说来，音乐软件真的没有孰高孰低的分别，有一些人的优越感真的只是因为小众而来的，他们瞧不起的，并不是别家的产品，而是用别家产品的用户罢了。 一个播放器软件，最终不在核心功能上发力，却每天给用户推送“吃鸡视频”，“网红段子”……我实在已经不知道如何去评价它，因为我不认为这可以用一个音乐软件的标准去评定了。 最近发现，下载下来的音乐变成了NCM格式，这是一款加密的音乐格式，也就是说，下载的音乐在会员过期以后即变为不可用的了，不能用其他播放器打开，更不可能放进随身听了。感觉就如同被绑架了一样，有趣的是，还是被绑架到一个版权少广告多的平台。 ","date":"2018-04-20","objectID":"/posts/%E5%86%8D%E8%A7%81%E7%BD%91%E6%98%93%E4%BA%91/:3:0","tags":null,"title":"再见，网易云音乐","uri":"/posts/%E5%86%8D%E8%A7%81%E7%BD%91%E6%98%93%E4%BA%91/"},{"categories":["随笔"],"content":"肆 所以，我只好带上自己的歌单，悄悄地来到QQ音乐。 网易云，希望你可以成长得更好。再见。 ","date":"2018-04-20","objectID":"/posts/%E5%86%8D%E8%A7%81%E7%BD%91%E6%98%93%E4%BA%91/:4:0","tags":null,"title":"再见，网易云音乐","uri":"/posts/%E5%86%8D%E8%A7%81%E7%BD%91%E6%98%93%E4%BA%91/"},{"categories":["杂谈"],"content":"最后更新时间：2018/3/1 14:06 本文未经允许，谢绝任何形式的转载 一个人如果自己都不尊重自己的权益，又如何期望别人来尊重呢？ 多少次，多少人告诉笔者，不要浪费时间在这样的事情上。“这个社会就是这样。”可它真的是吗？它应该是吗？ 倘若是长期使用电信网络的人会知道，经常在某个网页的某个位置出现一些来源不明的广告。而且，这些广告不限定网站，它们出现在各种各样的网页中。不管是打开浏览器浏览网页还是端游的登陆界面，都会弹出。 而最近，笔者好像意识到，笔者的手机，也出现了这样的情况。向周围的朋友有所打听，但朋友们的回复通常是 “什么？运营商还能插入广告” ","date":"2018-03-10","objectID":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A2%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E5%8A%AB%E6%8C%81%E6%8F%92%E5%85%A5%E5%B9%BF%E5%91%8A%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/:0:0","tags":null,"title":"店大不能欺客，被中移动劫持插入广告维权实录","uri":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A2%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E5%8A%AB%E6%8C%81%E6%8F%92%E5%85%A5%E5%B9%BF%E5%91%8A%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/"},{"categories":["杂谈"],"content":"这广告长什么样 先上图为敬： 这是腾讯手机QQ的内页（就是拜年红包）。（抛开逻辑来思考一下会不会有ZZ在自己的APP里面的内页插广告） 这张是网易云音乐分享页面被插入的广告（请看右下角，抛开逻辑思考跟上面一样的问题） 点开以后。不仅能查询到笔者的流量使用情况，还能知道笔者的手机号码和话费余额。 ","date":"2018-03-10","objectID":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A2%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E5%8A%AB%E6%8C%81%E6%8F%92%E5%85%A5%E5%B9%BF%E5%91%8A%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/:1:0","tags":null,"title":"店大不能欺客，被中移动劫持插入广告维权实录","uri":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A2%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E5%8A%AB%E6%8C%81%E6%8F%92%E5%85%A5%E5%B9%BF%E5%91%8A%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/"},{"categories":["杂谈"],"content":"它合法吗 根据《计算机信息网络国际联网安全保护管理办法》的规定： 第六条　任何单位和个人不得从事下列危害计算机信息网络安全的活动： (一)未经允许，进入计算机信息网络或者使用计算机信息网络资源的； (二)未经允许，对计算机信息网络功能进行删除、修改或者增加的； (三)未经允许，对计算机信息网络中存储、处理或者传输的数据和应用程序进行删除、修改或者增加的； (四)故意制作、传播计算机病毒等破坏性程序的； (五)其他危害计算机信息网络安全的。 在我们与运营商签订的服务条款中，有提到： 二、 乙方的义务 1、乙方为甲方提供的移动通信服务应当达到国家的相关标准。 所以，我们可以得出结论，这样的广告是无论如何都不会合法的。 ","date":"2018-03-10","objectID":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A2%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E5%8A%AB%E6%8C%81%E6%8F%92%E5%85%A5%E5%B9%BF%E5%91%8A%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/:2:0","tags":null,"title":"店大不能欺客，被中移动劫持插入广告维权实录","uri":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A2%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E5%8A%AB%E6%8C%81%E6%8F%92%E5%85%A5%E5%B9%BF%E5%91%8A%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/"},{"categories":["杂谈"],"content":"它为什么存在 在查阅了一些之前的案例之后，笔者个人认为可能是如下的情况：运营商的部分维护员工在服务器中插入了恶意代码。看起来，就好像是如下的流程：小红递给我一张纸条，中途需要经过小明（是的这间教室只有我们三个人，而且中途隔很远不得不经过他），于是小明拿到纸条以后偷偷打开，往上面画了一只青蛙，再递给我。于是我就收到了一张带有一只青蛙的纸条，而且无可奈何（因为消息总需要经过小明）。总结为流程图如下： st=\u003estart: 网站服务器发送文字“你好啊，下午有空吗？” receive=\u003eend: 用户收到文字 visit=\u003eoperation: 访问网页 server=\u003eoperation: 通过运营商发送，进入运营商被恶意污染的服务器 web_server=\u003econdition: 随机插入广告 insert=\u003eoperation: 插入广告，文字变为“你好啊，下|现在订购200M流量包只需要5￥|午有空吗？” uninsert=\u003eoperation: 不插入广告，原文传送 st-\u003eserver-\u003eweb_server web_server(yes)-\u003einsert-\u003ereceive web_server(no)-\u003euninsert-\u003ereceive 所以，插入广告这件事情，对于运营商简直就是伸伸手就能办到的了。而且由于有随机出现的特性，所以非常不便于取证。 不过，由于你在笔者的app那内页以及网易和csdn这些网站通吃的特点。而且还有一门神器叫做F12，可以得到一些证据： 至于利润方面嘛……你懂的。 ","date":"2018-03-10","objectID":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A2%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E5%8A%AB%E6%8C%81%E6%8F%92%E5%85%A5%E5%B9%BF%E5%91%8A%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/:3:0","tags":null,"title":"店大不能欺客，被中移动劫持插入广告维权实录","uri":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A2%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E5%8A%AB%E6%8C%81%E6%8F%92%E5%85%A5%E5%B9%BF%E5%91%8A%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/"},{"categories":["杂谈"],"content":"维权 终于到了最激动人心的部分，也就是维权了。一说到维权，很多人想到的是，流程麻烦，最后处理还特别简单特别不令人满意。笔者可能也是抱着这样的一种心情，所以一开始没有抱很大希望（甚至已经准备好了如何在电脑上使用工具拦截这些广告），但之后的处理让笔者感觉非常温暖（是的社会主义万岁）。 ","date":"2018-03-10","objectID":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A2%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E5%8A%AB%E6%8C%81%E6%8F%92%E5%85%A5%E5%B9%BF%E5%91%8A%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/:4:0","tags":null,"title":"店大不能欺客，被中移动劫持插入广告维权实录","uri":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A2%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E5%8A%AB%E6%8C%81%E6%8F%92%E5%85%A5%E5%B9%BF%E5%91%8A%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/"},{"categories":["杂谈"],"content":"Part1：先礼后兵 本着先礼后兵的好心态，笔者先拨打了10086，接通了人工： 客服：您好，请问有什么可以帮到您？ 我：我这边有一个投诉，我的上网的设备收到了你们的广告。 客服：呃？不好意思请问是什么方面的广告呢？ 我：就是你们移动推送的广告，不管什么设备只要用了我的手机卡上网就会出现。 （在经历过给客服解释我的问题后，因为提到我使用的是iPhone手机，她给我接到了iPhone的服务台） 客服：（此处省略第二次给客服描述）这边稍后就会给您回复的呢，我们会将您的情况做一个登记的。 于是得到了如下的答复 令人不满地是，笔者特地提到了app的内页以及任何设备都这样。仍旧给笔者这样子不负责任的答复。当时其实有一点生气，就再次拨打了10086。 客服：您好请问有什么可以帮到您？ 我：（重复刚刚的对话） 客服：呃不好意思，这边没有看到您有登记的呢。 我：哈？（一万只草泥马）那你也解决不了这个问题你就直接往你的上级报吧。我这边已经掌握了相关的证据，如果你们不能解决这个问题，我就只能到工信部问问看了。 客服：（一脸懵逼，小心翼翼说）那好，您说您已经有证据的话，那这样吧我这边往上提交一个情况，您说，我按照您说的写可以吗？ 然后笔者就这样子提交好了，得到了如下的一个凭据： 然后…… 就没有然后了…… 广告依旧，甚至比之前更频繁了呢。 ","date":"2018-03-10","objectID":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A2%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E5%8A%AB%E6%8C%81%E6%8F%92%E5%85%A5%E5%B9%BF%E5%91%8A%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/:4:1","tags":null,"title":"店大不能欺客，被中移动劫持插入广告维权实录","uri":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A2%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E5%8A%AB%E6%8C%81%E6%8F%92%E5%85%A5%E5%B9%BF%E5%91%8A%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/"},{"categories":["杂谈"],"content":"Part2：直接向工信部投诉 那既然你们移动自己内部不愿意处理，就只好找政府爸爸咯。于是打开了工信部的投诉地址：http://www.chinatcc.gov.cn/cms/shensus/ 其中找到了投诉邮箱（因为要附带取证材料，显然邮件更方便）：accept@chinatcc.gov.cn 然后打了这么一封邮件： 里面笔者特别附带了一句要求赔偿。有人会觉得笔者会不会不合适，其实笔者这么做的原因有二： 之前提到了这是不合法的，也就是说这不是服务条款里面的合法行为。这属于运营商的违约行为（事实上法律规定的限额似乎比300块高得多了）。所以提出索赔是合理的也是应该的。 不管运营商有没有给笔者拉到这个推送程序的白名单中，都必须要给笔者一个答复，毕竟有一笔钱还没有处理，所以避免对方敷衍了事。 于是，在第二天早上笔者接到了地方移动分公司的电话（效率真高）。 客服：您好徐先生，我们收到了您在工信部相关的投诉。请问您大概在哪个区域上网呢…… 我：就在我本地（然后第三次解释我的问题） 客服：噢好的我们将会把您的问题反映给网络部的同事，看您方不方便见面看一下。他稍后会联系您。 我：好的。 大约一两个小时后接到电话： 客服：嗯您好，我是这边网络部的。 我：（第四次解释我的问题） 客服：噢噢噢好的我了解了，但是你这个情况我们都是第一次见啊，您看您方便不方便什么时候见个面给我看一下。 我：见面就不用了，我把相关的材料发到你的邮箱。 客服：嗯好的。因为你知道吧这个工信部的投诉啊，它是会维护一个我们运营商和你们用户之间的协议的执行的，所以这个问题我们还是要积极处理。 于是笔者发送过去了。没有得到答复。而且第二天笔者还接到了移动的机器人电话（就是没有人工接的，按号码交互的那种），问笔者问题解决没，我说没解决它我居然还找我要评价，二话不说：不！满！意！ 一天后的傍晚接到了最开始联系笔者的分公司客服的电话（没办法嘛，没法结案呐）。于是笔者就直截了当说（带一点点愤怒语气，其实没有生气，但一定态度上要认真）：如果你们不能解决，就请你往上级报。对面表示已经汇报给省公司了。 第二天上午接到了一位胡姓客户经理的电话，一开始也是想要笔者见面解决问题，但笔者说明不太方便后对方表示会反馈到上级，但是希望笔者可以达成和解协议，也就是撤销投诉。 其实到这里笔者有犹豫，因为毕竟害怕撤销投诉以后人家改口。但仍旧觉得不需要如此赶尽杀绝（笔者个人猜测，这个小经理也是倒霉碰到笔者这样较真的客户，大家都是出来混口饭吃，多一点点爱的好）所以就答应了撤销投诉。 多话一句，用户是上帝没错，但是上帝不是残忍的，也不是不讲理的。我们实在没有必要得理不饶人地刁难客服，其实作为服务行业他们也只能遵守公司的规定。我们要的也是解决我们的问题，而不是泄愤，尊重每一个服务行业的人是一个人非常基本的素养。（让世界多一点点关爱……） 至此，问题已经告一段落。 ","date":"2018-03-10","objectID":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A2%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E5%8A%AB%E6%8C%81%E6%8F%92%E5%85%A5%E5%B9%BF%E5%91%8A%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/:4:2","tags":null,"title":"店大不能欺客，被中移动劫持插入广告维权实录","uri":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A2%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E5%8A%AB%E6%8C%81%E6%8F%92%E5%85%A5%E5%B9%BF%E5%91%8A%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/"},{"categories":["杂谈"],"content":"Part3: 在等待了几天后，笔者得到了该经理的回复，经理表示，已经上报了省公司核实了情况，对笔者的手机号码进行了“处理”，现在是不会出现广告的了。但是关于赔偿问题，对方就表现的比较不情愿进行推辞，虽表示愿意协助上报。但笔者考虑到此前已经撤销了相关投诉，故赔偿的可能性不太大。（一方面是笔者考虑不周到，二是主要目的已经达到了，不想再花更多的时间在这一小笔钱上） ","date":"2018-03-10","objectID":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A2%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E5%8A%AB%E6%8C%81%E6%8F%92%E5%85%A5%E5%B9%BF%E5%91%8A%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/:4:3","tags":null,"title":"店大不能欺客，被中移动劫持插入广告维权实录","uri":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A2%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E5%8A%AB%E6%8C%81%E6%8F%92%E5%85%A5%E5%B9%BF%E5%91%8A%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/"},{"categories":["杂谈"],"content":"总结 不管怎么样，在一番功夫后，广告是消除了，虽然被套路而没有拿到赔偿，但因为是第一次如此操作，还是比较满意。不过希望笔者以后也不需要操作第二次，毕竟这样的体验带给人的感受是并不美好的。 我们的权利需要我们自己尊重，如果我们都能够眼睁睁地看着自己的合法权利被侵犯，“忍气吞声”所换来的，很有可能是进一步的侵犯。 ","date":"2018-03-10","objectID":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A2%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E5%8A%AB%E6%8C%81%E6%8F%92%E5%85%A5%E5%B9%BF%E5%91%8A%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/:5:0","tags":null,"title":"店大不能欺客，被中移动劫持插入广告维权实录","uri":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A2%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E5%8A%AB%E6%8C%81%E6%8F%92%E5%85%A5%E5%B9%BF%E5%91%8A%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/"},{"categories":["杂谈"],"content":"引用(Reference) 计算机信息网络国际联网安全保护管理办法（公安部令第33号）, By 公安部 中国移动通信集团山东有限公司网上商城客户入网服务协议, By 中国移动通信集团山东有限公司 ","date":"2018-03-10","objectID":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A2%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E5%8A%AB%E6%8C%81%E6%8F%92%E5%85%A5%E5%B9%BF%E5%91%8A%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/:6:0","tags":null,"title":"店大不能欺客，被中移动劫持插入广告维权实录","uri":"/posts/%E5%BA%97%E5%A4%A7%E4%B8%8D%E8%83%BD%E6%AC%BA%E5%AE%A2%E8%A2%AB%E4%B8%AD%E7%A7%BB%E5%8A%A8%E5%8A%AB%E6%8C%81%E6%8F%92%E5%85%A5%E5%B9%BF%E5%91%8A%E7%BB%B4%E6%9D%83%E5%AE%9E%E5%BD%95/"},{"categories":["计算机"],"content":"利用简单的请求，获得详细的中英释义及例句 因为自己建立了一个电子生词本，经常需要在Excel表格中使用到查单词的功能。为了方便，开发了这样的一个简单的API。 本文即介绍这个API的调用方式以及在Excel中如何具体调用。 ","date":"2018-03-10","objectID":"/posts/bing%E8%AF%8D%E5%85%B8%E6%9F%A5%E5%8D%95%E8%AF%8D%E7%AC%AC%E4%B8%89%E6%96%B9api/:0:0","tags":null,"title":"Bing词典查单词第三方API","uri":"/posts/bing%E8%AF%8D%E5%85%B8%E6%9F%A5%E5%8D%95%E8%AF%8D%E7%AC%AC%E4%B8%89%E6%96%B9api/"},{"categories":["计算机"],"content":"API调用方式（若没有技术背景可直接看后文在Excel中直接使用） 为便于调用，API采用了非常简便的Get方式调用。只需要一个参数word即可。 如下是一个请求示例： https://www.fenzhengrou.wang/engtools/dic?word=hello 返回的数据也非常简单，是一个Json字串： { \"headword\": \"hello\", \"meanings\": { \"int.\": \"你好；喂；您好；哈喽\", \"网络\": \"哈罗；哈啰；大家好\" }, \"pronunce\": [\"美[heˈləʊ] \", \"英[həˈləʊ] \"], \"sample\": { \"H is for hello , whichis something nice to say , it means I 'm glad to see you , any time of a day .\": \"H代表你好，一句彬彬有礼的问好，意思是我在一天的任何时候都很高兴见到你。\", \"He saidto say hello and he hopes we 'll seeyoufor dinner soon , but he 's got too much work togo out pub crawlingwith the boys .\": \"他说让我问好，还说希望我们三个最近能在一起吃顿午饭，但是他要干的活儿实在太多了，所以没时间和咱们在酒吧里鬼混了。\", \"Hello ! How much should I pay ?\": \"你好！我要交多少钱？\", \"Hello , Sergio . What'sthematter ? - - I 'm feeling terrible . --Oh , dear ! Why don't you see adoctor ? -- Perhaps I will .\": \"你好，塞吉尔。你怎麽了？--我感觉很难受。--哎呀！你怎麽不去看医生？--也许我就去。\", \"It was OK . Thank you for coming out to meet me eventhough you are busy . Oh yeah , Andyasked me tosay hello .\": \"没关系。你很忙还来接我真是谢谢。对了，还有安迪向你问好。\", \"Or if oneof our cats comes uptosay hello , rubs itself on my leg and settles down for a nap near me . . . yep : great day!\": \"再或者，如果我们的某只猫走过来跟我打招呼，再拿身子在我腿上蹭，然后靠近我躺下来打个盹儿…没错：奇妙无比的又一天！\", \"Thankful fora familiar face in the crowd I mademywaytoward her to say hello .\": \"感谢能在人群里见到熟悉的脸庞，我走过去，跟她打招呼。\", \"The thing that annoys me about him is theway he never says\\\" Hello !\\\" .\": \"他使我讨厌的是，从来不跟别人打呼。\", \"Though I was a bit underdressed in apair of khaki pants and a damp leather jacket I decided to step in and say hello to her .\": \"虽然我当时穿着有些寒酸——黄褐色的裤子和潮湿的皮夹克，但我还是决定要走进去和她打个招呼。\", \"When she greetedmewithher hello , I replied \\\" Guess what I need from you today ? \\\"\": \"她向我打招呼，我说：你说我想弄点什么呢？\" }, \"tabs\": { \"反义词\": [\"int.\", \"ciao\", \",\", \"good afternoon\", \",\", \"good day\", \",\", \"good morning\", \",\", \"hi\"], \"同义词\": [\"int.\", \"goodbye\"], \"搭配\": [\"v.+n.\", \"say Hello\"] } } 剩下的，就是直接解析出来使用了。 ","date":"2018-03-10","objectID":"/posts/bing%E8%AF%8D%E5%85%B8%E6%9F%A5%E5%8D%95%E8%AF%8D%E7%AC%AC%E4%B8%89%E6%96%B9api/:1:0","tags":null,"title":"Bing词典查单词第三方API","uri":"/posts/bing%E8%AF%8D%E5%85%B8%E6%9F%A5%E5%8D%95%E8%AF%8D%E7%AC%AC%E4%B8%89%E6%96%B9api/"},{"categories":["计算机"],"content":"在Excel中使用 在2013版本之后，Excel中加入了WEBSERVICE函数。若不想使用这里提到的自定义函数，可以直接使用WEBSERVICE函数。 最终效果如下： ","date":"2018-03-10","objectID":"/posts/bing%E8%AF%8D%E5%85%B8%E6%9F%A5%E5%8D%95%E8%AF%8D%E7%AC%AC%E4%B8%89%E6%96%B9api/:2:0","tags":null,"title":"Bing词典查单词第三方API","uri":"/posts/bing%E8%AF%8D%E5%85%B8%E6%9F%A5%E5%8D%95%E8%AF%8D%E7%AC%AC%E4%B8%89%E6%96%B9api/"},{"categories":["计算机"],"content":"1.文档设置 首先我们需要把我们的Excel文档另存为xlsm格式，因为这样的格式可以加入自定义的函数。具体可以直接在另存为中选择Excel启用宏的工作簿 *.xlsm 然后，我们在文件-\u003e选项-\u003e自定义功能区的中找到开发工具并勾选。最终效果如图所示： ","date":"2018-03-10","objectID":"/posts/bing%E8%AF%8D%E5%85%B8%E6%9F%A5%E5%8D%95%E8%AF%8D%E7%AC%AC%E4%B8%89%E6%96%B9api/:2:1","tags":null,"title":"Bing词典查单词第三方API","uri":"/posts/bing%E8%AF%8D%E5%85%B8%E6%9F%A5%E5%8D%95%E8%AF%8D%E7%AC%AC%E4%B8%89%E6%96%B9api/"},{"categories":["计算机"],"content":"2.启用正则表达式 我们点击查看代码 在弹出的界面中选择菜单-\u003e工具-\u003e引用并勾选Microsoft VBScript Regular Expressions 5.5(若没有该选项，可以尝试勾选其他的最新版，切记勿勾选多个版本）然后单击确定 ","date":"2018-03-10","objectID":"/posts/bing%E8%AF%8D%E5%85%B8%E6%9F%A5%E5%8D%95%E8%AF%8D%E7%AC%AC%E4%B8%89%E6%96%B9api/:2:2","tags":null,"title":"Bing词典查单词第三方API","uri":"/posts/bing%E8%AF%8D%E5%85%B8%E6%9F%A5%E5%8D%95%E8%AF%8D%E7%AC%AC%E4%B8%89%E6%96%B9api/"},{"categories":["计算机"],"content":"3.建立自定义函数 看到窗口的左面，有类似的如下界面（可能有些许不同，但不影响使用） 在Microsoft Excel对象处单击右键选择插入-\u003e;模块，双击创建出来的该模块，并在代码框中复制上以下内容： Function LookupWord(word) If Len(word) \u003c 1 Then LookupWord = \"\" Exit Function End If On Error Resume Next With CreateObject(\"Microsoft.XMLHTTP\") .Open \"GET\", \"https://www.fenzhengrou.wang/engtools/dic?word=\" \u0026 word, True .Send Do Until .ReadyState = 4 DoEvents Loop LookupWord = .responsetext End With End Function Function regular_find(str, pat) Dim mRegExp As RegExp Dim mMatches As MatchCollection '匹配字符串集合对象 Dim mMatch As Match '匹配字符串 Set mRegExp = New RegExp With mRegExp .Global = True .IgnoreCase = False .Pattern = pat Set mMatches = .Execute(str) End With Dim ret ret = \"\" For Each mMatch In mMatches ret = ret \u0026 mMatch.Value Next regular_find = ret End Function Function regular_find_all(str, pat) Dim mRegExp As RegExp Dim mMatches As MatchCollection '匹配字符串集合对象 Dim mMatch As Match '匹配字符串 Set mRegExp = New RegExp With mRegExp .Global = True .IgnoreCase = False .Pattern = pat Set mMatches = .Execute(str) End With Dim ret ret = \"\" For Each mMatch In mMatches ret = ret \u0026 \"||||\" \u0026 mMatch.Value Next regular_find_all = Split(ret, \"||||\") End Function Function GetPronunciation(ori_data) Dim pronunce_part Dim pronunce pronunce_part = regular_find(ori_data, \"(pronunce[\\s\\S]*?\\],)\") pronunce = regular_find(pronunce_part, \"(\\[\"\"[\\s\\S]*?\"\"\\])\") pronunce = Replace(pronunce, \"[\"\"\", \"\") pronunce = Replace(pronunce, \"\"\"]\", \"\") pronunce = Replace(pronunce, \"\"\"\", \"\") pronunce = Replace(pronunce, \" ,\", Chr(10)) GetPronunciation = pronunce End Function Function GetMeanings(ori_data) Dim meanings_part meanings_part = regular_find(ori_data, \"(meanings\"\":\\{[\\s\\S]*?\\})\") meanings_part = regular_find(meanings_part, \"(\\{[\\s\\S]*?\\})\") meanings = regular_find_all(meanings_part, \"(\"\"[\\s\\S]*?\"\")\") Dim ret ret = \"\" For i = 1 To UBound(meanings) Step 1 If ((i - 1) Mod 2) = 0 And (i - 1) \u003c\u003e 0 Then ret = ret \u0026 Chr(10) End If ret = ret \u0026 Mid(meanings(i), 2, Len(meanings(i)) - 2) If ((i - 1) Mod 2) = 0 Then ret = ret \u0026 \":\" End If Next GetMeanings = ret End Function Function GetSamples(ori_data, max_sample) Dim samples_part samples_part = regular_find(ori_data, \"(sample\"\":\\{[\\s\\S]*?\\})\") samples_part = regular_find(samples_part, \"(\\{[\\s\\S]*?\\})\") samples_part = Mid(samples_part, 3, Len(samples_part) - 2) samples_part_arr = Split(samples_part, \"\"\",\"\"\") If UBound(samples_part_arr) + 1 \u003c max_sample Then max_sample = UBound(samples_part_arr) + 1 End If ret = \"\" For i = 0 To max_sample - 1 Step 1 samples_zip = Split(samples_part_arr(i), \"\"\":\"\"\") If UBound(samples_zip) = 1 Then ret = ret \u0026 (i + 1) \u0026 \". \" \u0026 samples_zip(0) \u0026 Chr(10) \u0026 samples_zip(1) \u0026 Chr(10) End If Next GetSamples = ret End Function Function GetSyn(ori_data) End Function 保存，然后回到Excel的主窗口。 ","date":"2018-03-10","objectID":"/posts/bing%E8%AF%8D%E5%85%B8%E6%9F%A5%E5%8D%95%E8%AF%8D%E7%AC%AC%E4%B8%89%E6%96%B9api/:2:3","tags":null,"title":"Bing词典查单词第三方API","uri":"/posts/bing%E8%AF%8D%E5%85%B8%E6%9F%A5%E5%8D%95%E8%AF%8D%E7%AC%AC%E4%B8%89%E6%96%B9api/"},{"categories":["计算机"],"content":"4.使用自定义函数 现在，我们就可以使用刚刚设置好的函数了。 例如如下是获得一个单词的释义到当前单元格。这里的A1是存放单词的单元格。 =GetMeanings(LookupWord(A1)) 例如如下是获得一个单词的例句到当前单元格。这里的A1是存放单词的单元格，2为获得例句的最大数量。 =GetSamples(LookupWord(A1),2) 例如如下是获得一个单词的读音到当前单元格。这里的A1是存放单词的单元格。 =GetPronunciation(LookupWord(A1)) 当前，在设置好以后，单元格默认是不会自动换行的，我们需要将其设置为自动换行，才能获得更好的显示效果 如此，便大功告成。只需要使用如上示例中的三个函数，就能获得单词的发音、释义、例句信息。 ","date":"2018-03-10","objectID":"/posts/bing%E8%AF%8D%E5%85%B8%E6%9F%A5%E5%8D%95%E8%AF%8D%E7%AC%AC%E4%B8%89%E6%96%B9api/:2:4","tags":null,"title":"Bing词典查单词第三方API","uri":"/posts/bing%E8%AF%8D%E5%85%B8%E6%9F%A5%E5%8D%95%E8%AF%8D%E7%AC%AC%E4%B8%89%E6%96%B9api/"},{"categories":["计算机"],"content":"5.特别注意 如果在打开Excel后，出现了如下提示，请务必选择启用内容。否则函数将无法计算。 由于Excel会在每次打开的时候尝试重新计算函数结果，所以建议在获得完释义以后将函数运行的结果单独复制成文本，而非保留公式。 ","date":"2018-03-10","objectID":"/posts/bing%E8%AF%8D%E5%85%B8%E6%9F%A5%E5%8D%95%E8%AF%8D%E7%AC%AC%E4%B8%89%E6%96%B9api/:2:5","tags":null,"title":"Bing词典查单词第三方API","uri":"/posts/bing%E8%AF%8D%E5%85%B8%E6%9F%A5%E5%8D%95%E8%AF%8D%E7%AC%AC%E4%B8%89%E6%96%B9api/"},{"categories":["计算机"],"content":"其他调用方式 如果希望使用其他的程序，例如通过编写程序来实现调用。只需要参考第一节来使用Get请求获得结果即可。 ","date":"2018-03-10","objectID":"/posts/bing%E8%AF%8D%E5%85%B8%E6%9F%A5%E5%8D%95%E8%AF%8D%E7%AC%AC%E4%B8%89%E6%96%B9api/:3:0","tags":null,"title":"Bing词典查单词第三方API","uri":"/posts/bing%E8%AF%8D%E5%85%B8%E6%9F%A5%E5%8D%95%E8%AF%8D%E7%AC%AC%E4%B8%89%E6%96%B9api/"},{"categories":["计算机"],"content":"声明 本API的数据均来自微软Bing词典，仅限于个人非商业性质地使用，若用户将该API用于不正当用途产生侵权或其他法律纠纷，与笔者无关。 ","date":"2018-03-10","objectID":"/posts/bing%E8%AF%8D%E5%85%B8%E6%9F%A5%E5%8D%95%E8%AF%8D%E7%AC%AC%E4%B8%89%E6%96%B9api/:4:0","tags":null,"title":"Bing词典查单词第三方API","uri":"/posts/bing%E8%AF%8D%E5%85%B8%E6%9F%A5%E5%8D%95%E8%AF%8D%E7%AC%AC%E4%B8%89%E6%96%B9api/"},{"categories":["计算机"],"content":"0. 序： 这是它的创造者中本聪（Satoshi Nakamoto）给出的介绍： A purely peer-to-peer version of electronic cash would allow online payments to be sent directly from one party to another without going through a financial institution. 译：一个完全通过端对端技术实现的电子现金系统，它允许在线支付可以由一方发起并支付给另一方而不需要通过任何的金融机构。 在2009年1月3日下午六点十五分零五秒，随着比特币的创世区块的诞生，第一批比特币被发掘出来。随后不断加入其中的人们感叹着它设计的精妙。其环环相扣的各种机制，不仅仅是对于支付领域，对于其他领域也具有非常大的启发意义。 在随后的第7年，也就是2016年，比特币迎来了一次“疯涨”，而2016年也被一些媒体称为“比特币之年”。在随后的2017年，比特币的价格更是一度飙升到20,000美元的高度。正是这样的现象，将比特币这样的新鲜事物带到了公众的面前。并受到了各界的广泛关注。 因为笔者本身对比特币并不感冒，所以在疯涨的两年里，没有去了解过，更没有对其进行投资，即便是现在众人惊呼“泡沫破碎”，也没有太大的兴趣。但前两天有一位很好的朋友向笔者询问了一些比特币的问题。所以抽了一些时间进行了一些学习和了解。本文既是对自己学习成果的记录和整理，也是希望借此可以让这样一个新奇的思想和技术能够被更多的人所知道。 在经过了考虑以后，笔者希望就计算机和金融两个领域的意义来分别讲述比特币。 注：阅读本文，有如下建议： 如果没有技术背景，文章对部分不易理解的技术细节进行了省略或抽象，不影响在宏观层面理解比特币 但本文仍旧保留了对一些技术（包括算法）的部分引用，供有技术背景的读者进行参考 由于笔者资历尚浅，希望能够尽力帮助读者领会这项技术中的精华所在，但学习终究不够深入（尤其是部分金融专业上的观点，大多由直接总结其他文章得到），若有所纰漏，欢迎批评指正 ","date":"2018-02-19","objectID":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/:1:0","tags":null,"title":"初窥比特币，革命性的时代骄傲","uri":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/"},{"categories":["计算机"],"content":"1. 技术实现 ","date":"2018-02-19","objectID":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/:2:0","tags":null,"title":"初窥比特币，革命性的时代骄傲","uri":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/"},{"categories":["计算机"],"content":"1.1 背景需求： 贸易在人类历史上已经进行了很久很久，然而放眼整个进化史，我们在贸易上发展的时间实在是短的可怜。所以我们暂时还没能演化出对于贸易的本能反应。（事实上，我们的本能难道不是尽可能占有更多的资源拿住不松手吗）所以，我们在交易中常常担心“被骗”。这也说明交易本身需要在双方信任的基础上进行。 在在线支付这件事情上，前人有过非常多的构想。尤其在于解决双重支付(Double-spending)的问题上我们已经有一套非常常用而且被广泛认可的方式，即借助共同信任的第三方来担任调节工作(Mediating)。例如支付宝、银行等等。因为我们对网线那头的他的约束力是极为有限的，这也就更说明我们需要一个第三方来对我们的交易进行仲裁和管理。不过这样的弊端是显而易见的： 交易双方都需要提供给第三方若干与交易本身不相干的信息，好比购买一个牙刷，但我需要把我的身份证、学生证、驾驶证甚至是出生证明（打趣）提供给第三方，这显然是对个人隐私的挑战。 交易具有“可逆性”(reversible)，这样的可逆性使得这个第三方拥有绝对的权利掌控交易。也因为各种对买家的保护性措施，使得有的时候发生在买家身上的欺诈性事件也让卖家头疼不已（有的东西是无法退货的，但可逆性使得任何交易都有一定可能被恢复）。 我们没办法保证这样的一个第三方会永久稳健且诚信地提供服务。因为它掌握的权力实在是太大了。或者说，万一某一天支付宝的机房管理员在吃小笼包的时候打翻了饮料把整层楼烧掉。那么所有的交易也就没有根据了。至于钱……人家心眼好选择相信你就会退还，但不退还其实也无可厚非因为并没有数据保留来证明这笔钱是属于谁的（当然这样的情况在现在的世界太难发生）。 然而，尽管有这样的弊端，我们仍不能否认，在体量足够大和稳健的第三方的支持下，这样的机制是非常令人满意的，至少在目前的中国是这样。 ","date":"2018-02-19","objectID":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/:2:1","tags":null,"title":"初窥比特币，革命性的时代骄傲","uri":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/"},{"categories":["计算机"],"content":"1.2 去中心化 正是在这样的弊端下，有人提出了非常有建设性的意见： What is needed is an electronic payment system based on cryptographic proof instead of trust, allowing any two willing parties to transact directly with each other without the need for a trusted third party. 译：所以，我们非常需要这样一种电子支付系统，它基于密码学原理而不基于信用，使得任何 达成一致的双方，能够直接进行支付，从而不需要第三方中介的参与。 如此，便是去中心化在这里的意义所在。读者可能会惊呼：“天哪，这简直好似在倒退，会到原始的时代”。那么我们便需要了解**“去中心化”**到底是怎么样的。 我们在之前有提到支付宝或者银行之类的模式，我们所有的交易都通过他们帮助我们来完成，所有的交易均掌握在他们的手里。这样的模式我们称为中心化。而去中心化，则是让每一个参与到网络里来的用户都可以平等地组建网络。如下是一个例子（虽然现实里不可能出现，但是笔者认为非常形象，下例主要参考于及时晴的回答，但修正了部分错误）： 在学校中，某个班级内部同学们经常互相交换彼此需要的物品（商品）。而经常有同学认为自己的东西价值更高而不便于交换。聪明的班主任想出了一个办法，她制作了许多特别的曲别针，每一个同学都能把自己的东西兑换成曲别针以后再用曲别针与对方交换，还能够在班级的图书角兑换书籍和其他文具。大家非常认可这样的方案。 而后来，这个体系最终崩溃了。因为有的同学为了得到更多的东西在自己制作曲别针。后来东窗事发，导致大家都不认可这样的曲别针了。 后来班主任改进了这个方法，停止使用实物曲别针，而改用划账的形式。每个同学有自己的账本，而总账放在班长的手里。所有发生的交易，同学们都需要向班长汇报，班长觉得：“嗯，没有问题。”就在总账本上予以记录以认可这项交易。 然而……这个体系最终还是崩溃了。因为有一天有同学发现和班长同桌的女生似乎有用不完的曲别针。这其中不可描述的原因……反正你懂的。 再后来班主任继续改进了这个办法，她给每个同学都分发了一个账本。要求是，不管发生任何交易，不管是否涉及到你，你都应该记录在你的账本上，然后告诉你旁边的同学来记录。在每天放学后，所有同学在一起核对账目看数据是否统一。如果账目有出入（毕竟不是所有人都能够完完全全准确地记录）则按照大多数人的记录为准 如此一来，去中心化的思想就比较容易理解了。它就是指每个人（节点）在网络中，都是对等的状态。当交易发生的时候，在自己的账本上记录之后“广播”给其他人（节点）。如此一来，就没有人可以轻易地篡改这些数据了。 上面的例子中，每一个同学，就是一个节点，他们每一个人都拥有一份账单的拷贝。 这样的方式具有一些特点： 完全不需要管理员，事实上，管理员也没有办法对其进行修改 它十分稳健，每一个节点都可以有一份完整的拷贝。所以不必过于担心数据会丢失的问题（看看你的上古种子还能不能下载） 可是单单去中心化对我们来说还很不够，因为这样的机制还很不安全，很不完善，于是我们看到另一项技术。 ","date":"2018-02-19","objectID":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/:2:2","tags":null,"title":"初窥比特币，革命性的时代骄傲","uri":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/"},{"categories":["计算机"],"content":"1.3 区块链 1.3.1 概述 这个词定然是众多读者耳熟能详了。因为它实在是太频繁地出现在我们的视野里。尽管名字很高端，但它的原理实际上十分的简单，甚至可以用粗暴来形容。 译： Block：区块 Prev Hash：前一区块的随机散列 Nonce：随机数 Tx：交易信息 如上便是一个简单的区块链的节选，我们可以简单地将区块看作是一段时间内发生的交易的集合（是的区块链本身并不记录用户的余额而是记录每一笔交易，尽管记录余额非常符合我们的逻辑）。所以说区块链我们可以将它看作为是账本，每一个参与到这个网络中的人，都维护着这么一份相同的账本，一旦某个节点上发生了交易，就相当于站在原地大喊告诉其他的节点：“我特么刚刚找李四买了一个牙刷！三块钱！给我记上！”，然后旁边的节点收到并验证了这项交易的有效性后，再站起来对旁边喊：“那货刚刚找李四买了一个牙刷！三块钱！没问题你们记上吧！”，于是数秒内，全球的节点都能同步这样的一个交易，也就相当于这个交易被整个网络认可了。当然，单单这样的系统是非常不可靠不安全的。其实区块链本身是一个链条。但它加入了一些工具，使得它具有了不可修改，难以被攻击的特点。如何实现的呢？这需要我们来了解一下图中的“随机散列”以及“随机数”这两个元素。 随机散列是标注区块唯一性的一个指纹（哈希值）(详细了解请参阅1.3.2小节），它基于区块的内容来计算，函数表达为’ y = hash(block) ’ ，每一个区块都几乎可以被认为指纹会不一样。不管区块被进行什么样的修改，只要进行了修改，随机散列就可以被认为会发生改变，甚至可能是改变得面目全非，这样的数字指纹非常难以被逆向解密，甚至可以说几乎是不能被解密（当然现在的一些网站已经提供了一些解密字典来暴力破解，但对于复杂的数据，解密仍是机会渺茫的），所以一旦区块被篡改，那么后面的节点保存的它的哈希值则是不正确的，这将会导致这样的区块不被周围的节点认可，也就是无效的区块。每一个排在后面的区块，都会存储前一个区块的随机散列值用于校验有效性。如此一来，一环套一环，想要修改了区块链中的某一个区块，就意味着接下来的区块全部都需要修改。 1.3.2 散列函数（选阅） 这段内容主要面向于想要对此有更全面了解的读者，若难以看懂可以直接跳过这一节，并不影响阅读 随机散列是一种散列函数(Hash函数，也称哈希)。它可以把近乎任意长度的一段文字压缩成定长（当然了，小于这个定长的文字得到的结果仍旧是定长的长度），而且只要哈希值不同，就意味着压缩前的文本一定是不相同的（但不相同的文本有可能会得到同样的哈希值，这样的情况称为冲突，即collision）。因为这样的特性，它的值域自然是远远大于它的定义域。在日常的用途里，它通常被用于鉴定消息的唯一性，因此也有“数字指纹”的说法。假设大雄快递一封信件给静香，快递员是胖虎，为了避免信件被胖虎在中途修改，大雄利用散列函数计算出文章的哈希值，然后告诉了静香。静香只要收到信件后，只需要再利用散列函数计算一遍并将结果与大雄告知的哈希值进行比较，就可以知道在运送途中有没有被动过手脚。 通常常见的散列函数有MD5，SHA1，SHA224，SHA256，SHA374，SHA512等等算法，在比特币中采用的是SHA256算法。笔者列举了几个简单的内容的哈希值： 内容 哈希值(Hash) Hello World a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e Hello World. f4bb1975bf1f81f76ce824f7536c1e101a8060a632a52289d530a6f600d52c92 可以看到，只是增加了一个句点在最后，得到的哈希值就会完全不同。 注：尽管在文本修改后，仍有极小的可能性Hash值相同，但我们认为这样的概率是极小的（甚至不如中头彩），所以在文章中我们表示它可以被认为是唯一的。 1.3.3 工作量证明 所以，说到这里，其实我们感觉区块好像是可以随便创建的，因为它记录着账本然后只需要计算出来上一个节点的哈希值就算完事了。然而，为了避免区块被快速地创建，中本聪引用了这样一种机制 工作量证明机制在Adam Back提出的哈希现金(Hashcash)中就已体现。 在进行随机散列运算时，工作量证明机制引入了对某一个特定值的扫描工作，比方说 SHA-256 ，随机散列值以一个或多个 0 开始。那么随着 0 的数目的上升, 找到这个解所需要的工作量 将呈指数增长，但是检验结果仅需要一次随机散列运算。 我们在区块中补增一个随机数(Nonce)，这个随机数要使得该给定区块的随机散列值出现 所需的那么多个 0。我们通过反复尝试来找到这个随机数，找到为止。这样我们就构建了一 个工作量证明机制。 它通过让计算机来实现计算出一个符合要求的哈希值，前面我们提到过，要逆向地计算哈希值是一项计算量异常巨大的（因为没有办法可以知道一个特定的哈希值是由什么文本得来的，唯一的办法就是——暴力穷举）。所以，如果攻击者想要在区块链中插入或者修改一个节点，就必须还得把下面所有的节点的随机数更新，这几乎是不可能的事情。另外，攻击者需要掌握至少全球51%的计算能力才能够实现他的攻击，这几乎是不可能的，在后文笔者将根据论文内容引用一些简单的论证） 我们来简单地说明一个这个工作量证明，首先明确两个非常重要的原则 哈希值是不可逆的，如果需要计算出来符合条件的哈希值，就需要对整个定义域进行穷举（当然这有运气的成分，有可能几分钟就能找到，有可能几年也找不到） 只要文本（区块）进行了修改，那么哈希值会立刻产生变化。 说起来，其实这个过程挺没意义的，每一个区块产生后，它的哈希值会以若干个0开始，我们可以认为我们需要得出一个哈希值也有这么多个0的随机数（请注意，随机数本身也会影响本区块的哈希值）。所以，一旦某个节点得到了这个解，那么这一个区块就属于这个节点了。区块中记录的第一条交易就是让区块的发现者获得一定数量的奖励（这也是挖矿的获利来源），例如创世区块它只记录了一条交易，那便是奖励给中本聪的50BTC的比特币。 那么问题来了，随着越来越多的节点加入，随着计算能力的增强，这个计算挑战似乎越来越不像是一个挑战了。于是比特币引入了一种难度调节的机制： To compensate for increasing hardware speed and varying interest in running nodes over time, the proof-of-work difficulty is determined by a moving average targeting an average number of blocks per hour. If they’re generated too fast, the difficulty increases. 译：另一个问题是，硬件的运算速度在高速增长，且节点参与网络的程度会有所起伏。为了解决这个问题，工作量证明的难度将采用移动平均目标的方法来确定，即令难度指向令每小时生成区块的速度为某一预设的平均数。如果区块生成的速度过快，那么难度就会提高。 说白了，就是算的越快，哈希值中的0就会越来越多，哈希值中的0越来越多，找到这个解所需要的工作量就会呈指数型增长。所以，比特币将新区块的平均生成速度设置为10分钟一个。 1.3.4 冲突解决 试想这样的场景，在日本的节点A，和在英国的节点B，在某一个时间同时算得了下一个区块，于是区块链造成了分支。那么为了确定哪一个才是主区块链并把另一个分支删除。就需要在接下来的一小时内进行计算竞赛，说白了就是看一段时间后哪条链更长，哪一个就是主链，因为更长的链，也就体现了更庞大的计算力。只要这个网络中大多数的节点都是诚实的，那么这样就可以做到不受干扰。而如果某个组织掌握了全球51%的计算力，似乎看起来为区块链做贡献会显得利益更大一些。因为覆盖掉主链的用途无非是在付款后，再把收款人收到的款项支付回来，这显然是不划算的。 所以，在交易进行后，我们通常认为6个新区块产生后（即1小时）交易则是难以被更改的了。而大宗交易我们通常需要等待12个区块产生（即2小时） 1.3.5 总结 如上的区块链，主要是实现了如下几个特点： 不可被修改 具有容错性 几乎无法被攻击 ","date":"2018-02-19","objectID":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/:2:3","tags":null,"title":"初窥比特币，革命性的时代骄傲","uri":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/"},{"categories":["计算机"],"content":"1.4 加密货币 在实现了对于账本的组织和管理以后，我们需要考虑比特币的流通问题。本节内容难度比较大，也并不会涉及到过深的指端末节（其实笔者自己也觉得讲得不太清楚所以删去了部分），对于基本的概念已经足够了解而对具体技术细节没有兴趣的话完全可以选择跳过本节。 1.4.1 非对称加密 我们来考虑一个现实情境。Bob有两把钥匙，一把是公钥，另一把是私钥。他把公钥放在网上，任何人都能够查看到他的公钥，但是私钥仅仅保存在自己的电脑中。 有一天Susan想要给Bob发送一封信件，则使用Bob的公钥对信件进行加密，然后发送给Bob，而Bob则利用自己的私钥来解密，查看到信件本身。 然后Bob想要进行回信，就利用散列算法（即哈希算法，详细可查阅1.3.2小节）计算出回信的哈希值，并用私钥加密，即生成了“数字签名”，并把数字签名附在回信上一起发送给Susan。Susan收到回信后利用Bob的公钥解密得到哈希值，并与收到的回信的哈希值比较，若两者一致就说明信件没有被修改过。 由此我们发现，非对称加密具有如下特点： 公钥和私钥成对存在并互相唯一（当然公钥可以进行复制并分发给其他人） 由公钥加密的数据只能由私钥解密，由私钥加密的数据只能由公钥解密。 公钥和私钥是互相的，但通常情况下并不建议将其二者身份倒置过来使用，即个人保留公钥而分发私钥。 私钥用来签名，公钥用来验证签名 1.4.2 交易链条模型 于是我们就能得到如下的图示： 译： Transaction：交易 Owner A’s Public Key：所有者A的公钥 Owner A’s Private Key：所有者A的私钥 Owner A’s Signature：所有者A的数字签名 Hash：随机散列（哈希值） 一切的交易都由各个用户使用私钥对交易进行加密，并把交易和公钥一起广播到其他的节点。通过私钥，我们可以推导出公钥，所以每个用户只需要保存好自己的私钥并不泄露即可。 另外，在使用当中，对于公钥比特币采用了椭圆曲线数字签名算法（ECDSA）。此处因为在比特币交易中技术细节均已经被设计为用户不可见或几乎不可见的状态。而设计到许多编码和密码学的相关知识，考虑到本文定位，笔者在这些细节上直接跳过。但仍进行一些简要的概念性的说明。 椭圆曲线加密法的一个重要特点是，由私钥可以推导出公钥，而公钥是不可能推导出私钥的。 私钥的第一位不同，与公钥是否支持压缩格式有关 私钥通常使用了Base58编码。将一个随机数（设计得非常好的随机数引擎）编码。 所以我们可以基本认为，这样的一个机制，是密码学安全的。 1.4.3 交易的时候发生了了什么 首先，我们可以把公钥就看作比特币的地址，因为比特币本身并没有钱包之类的概念。只有账单。整个区块链也只是存储了账单信息。而且全网的所有人都可以拥有整套的账单信息。（在使用Merkle树后，部分节点可以为了节省存储容量对之前不需要保留的账单进行清除，本文没有考虑这种情况是因为大部分的从业者都没有讲到这样的机制被运用，而比特币本身的论文当中是有明确说明的）。 新交易产生，即账单上新的一条记录产生 用户利用私钥给账单签名（数字签名） 节点将记录传递到全网 每一个收到记录的节点都会校验记录的有效性。比如判断是不是真有那么多钱（别忘了每个人都拥有一份完整的账单拷贝，可以推算出你的“余额”），判断是不是你本人发的。 每个节点都确认没有问题，那么就接受了这么一条交易记录。则这项交易就被承认了。 ","date":"2018-02-19","objectID":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/:2:4","tags":null,"title":"初窥比特币，革命性的时代骄傲","uri":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/"},{"categories":["计算机"],"content":"1.5 关于比特币的总量 我们经常听说比特币的总量是2100万，为什么是这样一个数字呢？ 比特币被设计为不同的阶段，一个阶段的标志为210000个区块，每过一个阶段创建一个新区块的奖励就会减半。按照十分钟的产生一个新区块的速度，这个时间大概正好是四年。算下来在33次减半以后，也就没有新的比特币产出了，所以总量被控制在2100万。而在所有的比特币产出之后，则通过对每一次交易收取手续费来进行奖励。 ","date":"2018-02-19","objectID":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/:2:5","tags":null,"title":"初窥比特币，革命性的时代骄傲","uri":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/"},{"categories":["计算机"],"content":"1.6 关于洗钱 首先我们来看一看比特币为了实现“不可逆”是如何解决找零问题的。假如我拥有10BTC，而要购买商家的8BTC的商品。那么则可以在输入端我输入10BTC，而在输出端生成8BTC给商家，而剩下的2BTC再给我。这样有一点点类似铸币厂(Mint)的感觉。 译： Transaction：交易 In：输入 Out：输出 所以我们假设一个毒贩想要进行交易，那么它则可以在输入端有无数其他人来输入，而输出端又有无数人输出。而最终其实只有一个人是卖家，一个人是买家。因为匿名性，监管方面就只能对每一个参与交易的人都进行盘查才行。 而有趣的是，比特币的设计目的就是为了匿名性，只要公钥对某个人不具有特别强的指向性，那就几乎无法对应到特定的人 注：虽然存在这样的解释，但论文中仍有这样的一段文字： Normally there will be either a single input from a larger previous transaction or multiple inputs combining smaller amounts, and at most two outputs: one for the payment, and one returning the change, if any, back to the sender. 译：一般而言是某次价值较大的前次交易构成的单一输入，或者由某几个价值较小的前次交易共同构成的并行输入，但是输出最多只有两个：一个用于支付，另一个用于找零（如有）。 所以上述内容仍有待考证的成分，仅仅可作为一个参考。如果有读者得到了具体答案，欢迎联系我修改这部分内容 ","date":"2018-02-19","objectID":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/:2:6","tags":null,"title":"初窥比特币，革命性的时代骄傲","uri":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/"},{"categories":["计算机"],"content":"2. 金融 这一部分的内容几乎全部是对于其他人的意见和解读的整理，笔者并不完全了解金融行业，但是为了读者进行参考，也同时提供了一些资料。如果整理的部分不够完善，读者可参阅本文的参考(References)部分来阅读原文。 ","date":"2018-02-19","objectID":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/:3:0","tags":null,"title":"初窥比特币，革命性的时代骄傲","uri":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/"},{"categories":["计算机"],"content":"2.1 比特币的价值来自哪里 根据论文中的描述： The steady addition of a constant of amount of new coins is analogous to gold miners expending resources to add gold to circulation. In our case, it is CPU time and electricity that is expended. 译：这种将一定数量新货币持续增添到货币系统中的方法，非常类似于耗费资源去挖掘金矿并将黄金注入到流通领域。此时，CPU的时间和电力消耗就是消耗的资源。 虽然笔者并不完全认同这样的观点。 不过国际上目前德国是首个承认比特币的国家，在欧盟的仲裁中也要求不对比特币进行征税而作为一种货币。 ","date":"2018-02-19","objectID":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/:3:1","tags":null,"title":"初窥比特币，革命性的时代骄傲","uri":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/"},{"categories":["计算机"],"content":"2.2 比特币是否存在操控 bitcoin最大的兑换商mtgox本身就是最大的庄家 btc和usd之间的兑换汇率被操控的程度被股票期货大多了 并且因为该货币具有匿名性，很难查到谁操控的 ","date":"2018-02-19","objectID":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/:3:2","tags":null,"title":"初窥比特币，革命性的时代骄傲","uri":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/"},{"categories":["计算机"],"content":"2.3 比特币的崩盘问题 如下引用一段别人的意见 会崩的，以前就崩溃过，从几美分涨到30美元，又跌到2美元，价格是大起大落。 往往在价格暴涨和暴跌的时候，有一些兑换网站卷钱跑路，对外则声称被黑客袭击，他们绝对不会赔付比特币储户任何损失。但话又说回来了，是因为前面论述bitcoin的价值在于洗钱，只要那些人类自古以来就有的古老职业没消失，bitcoin也不会消失。 再引用一个采访Shiller的片段： I’m not as negative as it may seem, but I think that the thing that’s driving bitcoin at the moment, like other examples of bubbles, is a story,\" Shiller said. “And it’s the quality of the story that’s attracting all this interest, and it’s not necessarily sustainable. 译：我对它的看法并不那么消极，但是我认为驱动着比特币的东西，就像是其他泡沫的例子一样。正是因为比特币被吹捧，人们才会被吸引，但它不一定能够永远持续这样下去。 笔者个人认为，比特币本身具备有通货紧缩的性质，而且它的总量固定，我们来看一个通货紧缩导致体系崩溃的经典例子[Monetary Theory and the Great Capitol Hill Baby Sitting Co-op Crisis]： 华盛顿有个“国会山托儿合作社”，因为大人们工作繁忙，常常需要外出而无法及时地照顾自己的子女，而演化出了这样一种方式。 成员靠帮人照顾小孩来挣合作社票券，用以“购买”其他成员的托儿服务。 一个家庭入社时，会得到等值于20小时托儿服务的票券；等孩子长大退会，必须上交等量的票券。换句话说，入社后要获得别的家庭帮忙托儿，就必须先提供服务、挣得票券。 这样看似是一种妙不可言的机制，可它最后还是崩溃了 有夫妇暂时没有外出计划，愿意替人照顾婴儿，积累票券；他们积累的时候，别的夫妇手中的票券就少了。这样，就有人觉得票券不够，于是很想代人照顾婴儿；然而这种机会越来越稀少，这又使各夫妇更加注重维持票券储备，除非情况特殊，否则不愿意轻易使用，而这又让代人照顾婴儿的机会更为稀缺了…… 如此的螺旋式通缩，使得这样一个体系迅速地崩塌， 可以看出，这是类似于通缩的恶性循环，唯一不同的是“货币币值”并未发生变化，一张票券还是对应半小时服务。 克鲁格曼也提到了票券发行的复杂性，但他认为这些细节“不重要”，并在书中略去了。实际上，要搞清合作社衰退的原因，必须研究这些细节。 首先要知道，合作社得有组织者，为提供服务的夫妇和要外出的夫妇作“配对”。入社的服务要为组织者提供报酬，具体而言，每个成员家庭每年要支付等值14小时服务的票券。 根据斯威尼夫妇的《货币理论与大国会山托儿合作社危机》，当时150个成员家庭，每年交纳2100小时（14*150=2100）的票券，但管理者领取的报酬是等值1902小时的票券。这1902小时可以用回到合作社内，因此并未退出流通，另有198小时的差额票券“沉淀”在某处（具体是哪里，文章没有详述）。 假设合作社的家庭数量维持稳定，则每月有198小时的票券退出流通。现有家庭入社时拿到的20小时票券，很快就不够用了，慢慢地大家都开始囤积票券，怕将来不够用时没地方挣。 所以，衰退的真相是票券的沉淀，或者说货币的“窖藏”——除了198张票券不知锁在那个抽屉（或者别的方式）外，组织者也可能拿到超额的票券。 所以说，我们可以考虑类似发放借贷的方法来让夫妇们贮藏更少的票券。也可以直接使用超发票券的方式来缓解，事实上在论文的结论中，超发票券的效果是立竿见影的。 显而易见的是，我们在之前关于比特币的实现原理上已经说明了，比特币的总量控制在2100万（严格来说并没有完全到2100万），所以超发的方法在这里不可行。根据比特币的一部分数据来看，各种入局者都更多的希望保留货币。 ","date":"2018-02-19","objectID":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/:3:3","tags":null,"title":"初窥比特币，革命性的时代骄傲","uri":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/"},{"categories":["计算机"],"content":"2.4 泡沫？ 如下引用一段King Matrix的看法： 用户增加。比如从最近开始，一个是本来非常小非常小圈子里面的东西突然曝光给几十亿人，任何一个东西耗费了如此多的媒体资源曝光，本身就给比特币带来了大量资金。 媒体带来的新人里面基本上大部分是投机客，投机客的特点是过分高估比特币的升值潜力，假如比特币的真正使用者（比如上面提到的黑市）平均每年增长100%的话，投机客蜂拥而入，有可能会把以后几年比特币的增长前景全部透支，吹成10000%，也就是格林斯潘说的泡沫。 在股票市场里面这叫提前消化利好，等于说现在的比特币价格已经算进了一段时间以后的增值潜力。这就比如贷款买房透支了今后20年的工资，如果工资稍微断顿的话会发生什么？ 庄家。这个长期存在，大家都知道有庄，尤其是这波上涨与庄家更是密不可分。 政府的政策影响，尤其是中国，因为中国的比特币交易量占世界比例很大，所以自然中国政府的政策对比特币有重大影响。 而比特币在最近所显示的价格起伏已经表明了其具有部分泡沫的性质，甚至有媒体结合了泡沫曲线与比特币价格曲线来看。 无可争议的是，在比特币大涨之后，的确有非常多的媒体在报道中几乎只用正面的态度，甚至部分媒体包括对于许多金融分析师的采访也只是部分报道。吸引更多的人参与。 ","date":"2018-02-19","objectID":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/:3:4","tags":null,"title":"初窥比特币，革命性的时代骄傲","uri":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/"},{"categories":["计算机"],"content":"3. 写在最后 作为一个不很懂金融的人来说，笔者看到的，更多的是这项技术的前景。无疑，它的出现一定是开创性的。应该在不久的未来，更多的行业和领域都有可能应用这一项技术所带来的启发来创造更令人兴奋和惊喜的产品。 我们一方面迎接新的技术所带来的美好，另一方面也应当看清楚这项技术背后本身是在维护“匿名性”和“自由”的，它不受监管，也就是说，不论是买家还是卖家，当服务本身出现问题的时候，都会显得无能为力。更有趣的是，如果某项合法的交易是写在一段本不应合法的区块链中的时候，很有可能在最后被丢失掉。我们没有办法排除这样的可能性。至于更多的非法用途，各种媒体也有相关的曝光。此处不再赘述。 此文若有错误，欢迎批评指正 作者：徐梓涵 电子邮箱：xuzihanapple@live.com 未经许可，不接受转载 最后编辑时间：2018/2/19 16:24 ","date":"2018-02-19","objectID":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/:4:0","tags":null,"title":"初窥比特币，革命性的时代骄傲","uri":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/"},{"categories":["计算机"],"content":"4. 参考(References) Bitcoin: A Peer-to-Peer Electronic Cash System, By Satoshi Nakamoto 比特币：一种点对点的电子现金系统（即上文的中文翻译参考）, 翻译：8btc.com What is a Digital Signature?, By David Youd 问题 比特币系统是如何运行的？ 下的回答, By King Matrix Bitcoin: Economics, Technology, and Governance By Rainer Böhme, Nicolas Christin, Benjamin Edelman, and Tyler Moore Shiller的采访: Nobel Prize winner Robert Shiller explains how bitcoin resembles past market bubbles Monetary Theory and the Great Capitol Hill Baby Sitting Co-op Crisis: Comment, By Joan Sweeney; Richard James Sweeney 国会山托儿合作社“货币危机”的真相, By 狗叔 ","date":"2018-02-19","objectID":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/:5:0","tags":null,"title":"初窥比特币，革命性的时代骄傲","uri":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/"},{"categories":["计算机"],"content":"5. 推荐参阅 比特币的私钥，公钥和地址是什么？, By 姜家志 揭秘比特币和区块链（三）：比特币的私钥、公钥与地址, By 张健 问题 区块链是什么，如何简单易懂地介绍区块链？ 下的回答, By 汪乐-LaiW3n 世界上最小的宏观经济模型 MINIMAC, By Paul R. Krugman ","date":"2018-02-19","objectID":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/:6:0","tags":null,"title":"初窥比特币，革命性的时代骄傲","uri":"/posts/%E5%88%9D%E7%AA%A5%E6%AF%94%E7%89%B9%E5%B8%81%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84%E6%97%B6%E4%BB%A3%E9%AA%84%E5%82%B2/"}]